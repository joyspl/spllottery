//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LTMSWebApp.LTMSServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LTMSServiceRef.ILTMSService")]
    public interface ILTMSService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetUnSoldSummaryById", ReplyAction="http://tempuri.org/ILTMSService/GetUnSoldSummaryByIdResponse")]
        System.Data.DataTable GetUnSoldSummaryById(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetUnSoldSummaryById", ReplyAction="http://tempuri.org/ILTMSService/GetUnSoldSummaryByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetUnSoldSummaryByIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetPrintOrderDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetPrintOrderDtlByIdResponse")]
        System.Data.DataTable GetPrintOrderDtlById(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetPrintOrderDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetPrintOrderDtlByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetPrintOrderDtlByIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInRequisitionDealer", ReplyAction="http://tempuri.org/ILTMSService/InsertInRequisitionDealerResponse")]
        LTMSWebApp.LTMSServiceRef.InsertInRequisitionDealerResponse InsertInRequisitionDealer(LTMSWebApp.LTMSServiceRef.InsertInRequisitionDealerRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInRequisitionDealer", ReplyAction="http://tempuri.org/ILTMSService/InsertInRequisitionDealerResponse")]
        System.Threading.Tasks.Task<LTMSWebApp.LTMSServiceRef.InsertInRequisitionDealerResponse> InsertInRequisitionDealerAsync(LTMSWebApp.LTMSServiceRef.InsertInRequisitionDealerRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInRequisitionDealer", ReplyAction="http://tempuri.org/ILTMSService/UpdateInRequisitionDealerResponse")]
        bool UpdateInRequisitionDealer(LTMSClass.ClsRequisition objRequisition, System.Data.DataTable tblDirectorRequisitionDtl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInRequisitionDealer", ReplyAction="http://tempuri.org/ILTMSService/UpdateInRequisitionDealerResponse")]
        System.Threading.Tasks.Task<bool> UpdateInRequisitionDealerAsync(LTMSClass.ClsRequisition objRequisition, System.Data.DataTable tblDirectorRequisitionDtl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitionDealerDtl", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitionDealerDtlResponse")]
        System.Data.DataTable GetRequisitionDealerDtl(LTMSClass.clsInputParameter objInputParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitionDealerDtl", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitionDealerDtlResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitionDealerDtlAsync(LTMSClass.clsInputParameter objInputParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitionDealerDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitionDealerDtlByIdResponse")]
        System.Data.DataTable GetRequisitionDealerDtlById(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitionDealerDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitionDealerDtlByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitionDealerDtlByIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInRequisitionDealer", ReplyAction="http://tempuri.org/ILTMSService/DeleteInRequisitionDealerResponse")]
        bool DeleteInRequisitionDealer(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInRequisitionDealer", ReplyAction="http://tempuri.org/ILTMSService/DeleteInRequisitionDealerResponse")]
        System.Threading.Tasks.Task<bool> DeleteInRequisitionDealerAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitionDealerDtlByStatus", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitionDealerDtlByStatusResponse")]
        System.Data.DataTable GetRequisitionDealerDtlByStatus(LTMSClass.clsInputParameter objInputParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitionDealerDtlByStatus", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitionDealerDtlByStatusResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitionDealerDtlByStatusAsync(LTMSClass.clsInputParameter objInputParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInRequisitionDealer", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInRequisitionDealerResponse")]
        bool UpdateApprovalInRequisitionDealer(LTMSClass.ClsRequisition objRequisition, string ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInRequisitionDealer", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInRequisitionDealerResponse")]
        System.Threading.Tasks.Task<bool> UpdateApprovalInRequisitionDealerAsync(LTMSClass.ClsRequisition objRequisition, string ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InserInLotteryClaimEntry", ReplyAction="http://tempuri.org/ILTMSService/InserInLotteryClaimEntryResponse")]
        LTMSWebApp.LTMSServiceRef.InserInLotteryClaimEntryResponse InserInLotteryClaimEntry(LTMSWebApp.LTMSServiceRef.InserInLotteryClaimEntryRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InserInLotteryClaimEntry", ReplyAction="http://tempuri.org/ILTMSService/InserInLotteryClaimEntryResponse")]
        System.Threading.Tasks.Task<LTMSWebApp.LTMSServiceRef.InserInLotteryClaimEntryResponse> InserInLotteryClaimEntryAsync(LTMSWebApp.LTMSServiceRef.InserInLotteryClaimEntryRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryClaimEntryDtlByReqCode", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryClaimEntryDtlByReqCodeResponse")]
        System.Data.DataTable GetLotteryClaimEntryDtlByReqCode(string ReqCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryClaimEntryDtlByReqCode", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryClaimEntryDtlByReqCodeResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryClaimEntryDtlByReqCodeAsync(string ReqCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryClaimEntryDtlByStatus", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryClaimEntryDtlByStatusResponse")]
        System.Data.DataTable GetLotteryClaimEntryDtlByStatus(LTMSClass.clsInputParameter objInputParameter, int InClaimType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryClaimEntryDtlByStatus", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryClaimEntryDtlByStatusResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryClaimEntryDtlByStatusAsync(LTMSClass.clsInputParameter objInputParameter, int InClaimType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryClaimEntryDtlByReqId", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryClaimEntryDtlByReqIdResponse")]
        System.Data.DataSet GetLotteryClaimEntryDtlByReqId(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryClaimEntryDtlByReqId", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryClaimEntryDtlByReqIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetLotteryClaimEntryDtlByReqIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInLotteryClaimEntry", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInLotteryClaimEntryResponse")]
        bool UpdateApprovalInLotteryClaimEntry(LTMSClass.ClsLotteryClaimApprovalDetails objClsLotteryClaimApprovalDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInLotteryClaimEntry", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInLotteryClaimEntryResponse")]
        System.Threading.Tasks.Task<bool> UpdateApprovalInLotteryClaimEntryAsync(LTMSClass.ClsLotteryClaimApprovalDetails objClsLotteryClaimApprovalDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalByStausInLotteryClaimEntry", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalByStausInLotteryClaimEntryResponse")]
        bool UpdateApprovalByStausInLotteryClaimEntry(LTMSClass.ClsRequisition objRequisition, string ReqId, int ClaimType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalByStausInLotteryClaimEntry", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalByStausInLotteryClaimEntryResponse")]
        System.Threading.Tasks.Task<bool> UpdateApprovalByStausInLotteryClaimEntryAsync(LTMSClass.ClsRequisition objRequisition, string ReqId, int ClaimType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryClaimSendToGovDtlByStatus", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryClaimSendToGovDtlByStatusResponse")]
        System.Data.DataTable GetLotteryClaimSendToGovDtlByStatus(LTMSClass.clsInputParameter objInputParameter, int InClaimType, int GovId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryClaimSendToGovDtlByStatus", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryClaimSendToGovDtlByStatusResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryClaimSendToGovDtlByStatusAsync(LTMSClass.clsInputParameter objInputParameter, int InClaimType, int GovId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetClaimSendToGovApprovedDtl", ReplyAction="http://tempuri.org/ILTMSService/GetClaimSendToGovApprovedDtlResponse")]
        System.Data.DataTable GetClaimSendToGovApprovedDtl(LTMSClass.clsInputParameter objInputParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetClaimSendToGovApprovedDtl", ReplyAction="http://tempuri.org/ILTMSService/GetClaimSendToGovApprovedDtlResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetClaimSendToGovApprovedDtlAsync(LTMSClass.clsInputParameter objInputParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateLotteryClaimEntrySendToGov", ReplyAction="http://tempuri.org/ILTMSService/UpdateLotteryClaimEntrySendToGovResponse")]
        LTMSWebApp.LTMSServiceRef.UpdateLotteryClaimEntrySendToGovResponse UpdateLotteryClaimEntrySendToGov(LTMSWebApp.LTMSServiceRef.UpdateLotteryClaimEntrySendToGovRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateLotteryClaimEntrySendToGov", ReplyAction="http://tempuri.org/ILTMSService/UpdateLotteryClaimEntrySendToGovResponse")]
        System.Threading.Tasks.Task<LTMSWebApp.LTMSServiceRef.UpdateLotteryClaimEntrySendToGovResponse> UpdateLotteryClaimEntrySendToGovAsync(LTMSWebApp.LTMSServiceRef.UpdateLotteryClaimEntrySendToGovRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetSendToGovAnnextureIIIByID", ReplyAction="http://tempuri.org/ILTMSService/GetSendToGovAnnextureIIIByIDResponse")]
        System.Data.DataTable GetSendToGovAnnextureIIIByID(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetSendToGovAnnextureIIIByID", ReplyAction="http://tempuri.org/ILTMSService/GetSendToGovAnnextureIIIByIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSendToGovAnnextureIIIByIDAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInTicketInventory", ReplyAction="http://tempuri.org/ILTMSService/InsertInTicketInventoryResponse")]
        bool InsertInTicketInventory(LTMSClass.ClsTicketInventory objTicketInventory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInTicketInventory", ReplyAction="http://tempuri.org/ILTMSService/InsertInTicketInventoryResponse")]
        System.Threading.Tasks.Task<bool> InsertInTicketInventoryAsync(LTMSClass.ClsTicketInventory objTicketInventory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInTicketInventory", ReplyAction="http://tempuri.org/ILTMSService/UpdateInTicketInventoryResponse")]
        bool UpdateInTicketInventory(LTMSClass.ClsTicketInventory objTicketInventory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInTicketInventory", ReplyAction="http://tempuri.org/ILTMSService/UpdateInTicketInventoryResponse")]
        System.Threading.Tasks.Task<bool> UpdateInTicketInventoryAsync(LTMSClass.ClsTicketInventory objTicketInventory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GenerateLotteryNumberDtlById", ReplyAction="http://tempuri.org/ILTMSService/GenerateLotteryNumberDtlByIdResponse")]
        bool GenerateLotteryNumberDtlById(long InDataUniqueId, int TicketStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GenerateLotteryNumberDtlById", ReplyAction="http://tempuri.org/ILTMSService/GenerateLotteryNumberDtlByIdResponse")]
        System.Threading.Tasks.Task<bool> GenerateLotteryNumberDtlByIdAsync(long InDataUniqueId, int TicketStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InserInTicketInventoryClaimed", ReplyAction="http://tempuri.org/ILTMSService/InserInTicketInventoryClaimedResponse")]
        bool InserInTicketInventoryClaimed(LTMSClass.ClsLottery objClsLottery, System.Data.DataTable IntblTicketNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InserInTicketInventoryClaimed", ReplyAction="http://tempuri.org/ILTMSService/InserInTicketInventoryClaimedResponse")]
        System.Threading.Tasks.Task<bool> InserInTicketInventoryClaimedAsync(LTMSClass.ClsLottery objClsLottery, System.Data.DataTable IntblTicketNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetVariableClaimPrizeById", ReplyAction="http://tempuri.org/ILTMSService/GetVariableClaimPrizeByIdResponse")]
        System.Data.DataTable GetVariableClaimPrizeById(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetVariableClaimPrizeById", ReplyAction="http://tempuri.org/ILTMSService/GetVariableClaimPrizeByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetVariableClaimPrizeByIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetVariableClaimByClaimId", ReplyAction="http://tempuri.org/ILTMSService/GetVariableClaimByClaimIdResponse")]
        System.Data.DataTable GetVariableClaimByClaimId(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetVariableClaimByClaimId", ReplyAction="http://tempuri.org/ILTMSService/GetVariableClaimByClaimIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetVariableClaimByClaimIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetVariableClaimVoucherDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetVariableClaimVoucherDtlByIdResponse")]
        System.Data.DataTable GetVariableClaimVoucherDtlById(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetVariableClaimVoucherDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetVariableClaimVoucherDtlByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetVariableClaimVoucherDtlByIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInVariableClaimByVoucherId", ReplyAction="http://tempuri.org/ILTMSService/DeleteInVariableClaimByVoucherIdResponse")]
        bool DeleteInVariableClaimByVoucherId(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInVariableClaimByVoucherId", ReplyAction="http://tempuri.org/ILTMSService/DeleteInVariableClaimByVoucherIdResponse")]
        System.Threading.Tasks.Task<bool> DeleteInVariableClaimByVoucherIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInVariableClaim", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInVariableClaimResponse")]
        bool UpdateApprovalInVariableClaim(LTMSClass.ClsRequisition objRequisition, string ReqId, System.Data.DataTable IntblTicketNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInVariableClaim", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInVariableClaimResponse")]
        System.Threading.Tasks.Task<bool> UpdateApprovalInVariableClaimAsync(LTMSClass.ClsRequisition objRequisition, string ReqId, System.Data.DataTable IntblTicketNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InserInTicketInventoryUnSold", ReplyAction="http://tempuri.org/ILTMSService/InserInTicketInventoryUnSoldResponse")]
        bool InserInTicketInventoryUnSold(LTMSClass.ClsLottery objClsLottery, System.Data.DataTable IntblTicketNo, int SaveStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InserInTicketInventoryUnSold", ReplyAction="http://tempuri.org/ILTMSService/InserInTicketInventoryUnSoldResponse")]
        System.Threading.Tasks.Task<bool> InserInTicketInventoryUnSoldAsync(LTMSClass.ClsLottery objClsLottery, System.Data.DataTable IntblTicketNo, int SaveStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryUnsold", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryUnsoldResponse")]
        System.Data.DataTable GetLotteryUnsold(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryUnsold", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryUnsoldResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryUnsoldAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitionTransactionDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitionTransactionDtlByIdResponse")]
        System.Data.DataTable GetRequisitionTransactionDtlById(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitionTransactionDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitionTransactionDtlByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitionTransactionDtlByIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInRequisitionChallan", ReplyAction="http://tempuri.org/ILTMSService/UpdateInRequisitionChallanResponse")]
        bool UpdateInRequisitionChallan(LTMSClass.ClsChallan objChallan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInRequisitionChallan", ReplyAction="http://tempuri.org/ILTMSService/UpdateInRequisitionChallanResponse")]
        System.Threading.Tasks.Task<bool> UpdateInRequisitionChallanAsync(LTMSClass.ClsChallan objChallan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InserInRequisitionChallan", ReplyAction="http://tempuri.org/ILTMSService/InserInRequisitionChallanResponse")]
        LTMSWebApp.LTMSServiceRef.InserInRequisitionChallanResponse InserInRequisitionChallan(LTMSWebApp.LTMSServiceRef.InserInRequisitionChallanRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InserInRequisitionChallan", ReplyAction="http://tempuri.org/ILTMSService/InserInRequisitionChallanResponse")]
        System.Threading.Tasks.Task<LTMSWebApp.LTMSServiceRef.InserInRequisitionChallanResponse> InserInRequisitionChallanAsync(LTMSWebApp.LTMSServiceRef.InserInRequisitionChallanRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitionChallanDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitionChallanDtlByIdResponse")]
        System.Data.DataTable GetRequisitionChallanDtlById(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitionChallanDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitionChallanDtlByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitionChallanDtlByIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetChallanDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetChallanDtlByIdResponse")]
        System.Data.DataTable GetChallanDtlById(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetChallanDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetChallanDtlByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetChallanDtlByIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInChallanById", ReplyAction="http://tempuri.org/ILTMSService/DeleteInChallanByIdResponse")]
        bool DeleteInChallanById(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInChallanById", ReplyAction="http://tempuri.org/ILTMSService/DeleteInChallanByIdResponse")]
        System.Threading.Tasks.Task<bool> DeleteInChallanByIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInRequisitionChallan", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInRequisitionChallanResponse")]
        bool UpdateApprovalInRequisitionChallan(LTMSClass.ClsChallan objChallan, string ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInRequisitionChallan", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInRequisitionChallanResponse")]
        System.Threading.Tasks.Task<bool> UpdateApprovalInRequisitionChallanAsync(LTMSClass.ClsChallan objChallan, string ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetVariableIncentiveByReqId", ReplyAction="http://tempuri.org/ILTMSService/GetVariableIncentiveByReqIdResponse")]
        System.Data.DataTable GetVariableIncentiveByReqId(long InDataUniqueId, string ClaimType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetVariableIncentiveByReqId", ReplyAction="http://tempuri.org/ILTMSService/GetVariableIncentiveByReqIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetVariableIncentiveByReqIdAsync(long InDataUniqueId, string ClaimType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDealerListOfTransactionDtl", ReplyAction="http://tempuri.org/ILTMSService/GetDealerListOfTransactionDtlResponse")]
        System.Data.DataTable GetDealerListOfTransactionDtl();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDealerListOfTransactionDtl", ReplyAction="http://tempuri.org/ILTMSService/GetDealerListOfTransactionDtlResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDealerListOfTransactionDtlAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDealerTransactionDtlByReqId", ReplyAction="http://tempuri.org/ILTMSService/GetDealerTransactionDtlByReqIdResponse")]
        System.Data.DataSet GetDealerTransactionDtlByReqId(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDealerTransactionDtlByReqId", ReplyAction="http://tempuri.org/ILTMSService/GetDealerTransactionDtlByReqIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDealerTransactionDtlByReqIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetProfitLossDtlByReqId", ReplyAction="http://tempuri.org/ILTMSService/GetProfitLossDtlByReqIdResponse")]
        System.Data.DataTable GetProfitLossDtlByReqId(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetProfitLossDtlByReqId", ReplyAction="http://tempuri.org/ILTMSService/GetProfitLossDtlByReqIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetProfitLossDtlByReqIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInSeriesGeneration", ReplyAction="http://tempuri.org/ILTMSService/InsertInSeriesGenerationResponse")]
        LTMSWebApp.LTMSServiceRef.InsertInSeriesGenerationResponse InsertInSeriesGeneration(LTMSWebApp.LTMSServiceRef.InsertInSeriesGenerationRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInSeriesGeneration", ReplyAction="http://tempuri.org/ILTMSService/InsertInSeriesGenerationResponse")]
        System.Threading.Tasks.Task<LTMSWebApp.LTMSServiceRef.InsertInSeriesGenerationResponse> InsertInSeriesGenerationAsync(LTMSWebApp.LTMSServiceRef.InsertInSeriesGenerationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInSeriesGeneration", ReplyAction="http://tempuri.org/ILTMSService/UpdateInSeriesGenerationResponse")]
        bool UpdateInSeriesGeneration(LTMSClass.ClsSeriesGeneration obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInSeriesGeneration", ReplyAction="http://tempuri.org/ILTMSService/UpdateInSeriesGenerationResponse")]
        System.Threading.Tasks.Task<bool> UpdateInSeriesGenerationAsync(LTMSClass.ClsSeriesGeneration obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetSeriesGenerationAll", ReplyAction="http://tempuri.org/ILTMSService/GetSeriesGenerationAllResponse")]
        System.Data.DataTable GetSeriesGenerationAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetSeriesGenerationAll", ReplyAction="http://tempuri.org/ILTMSService/GetSeriesGenerationAllResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSeriesGenerationAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetSeriesGenerationById", ReplyAction="http://tempuri.org/ILTMSService/GetSeriesGenerationByIdResponse")]
        System.Data.DataTable GetSeriesGenerationById(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetSeriesGenerationById", ReplyAction="http://tempuri.org/ILTMSService/GetSeriesGenerationByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSeriesGenerationByIdAsync(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetSeriesGenerationByReqId", ReplyAction="http://tempuri.org/ILTMSService/GetSeriesGenerationByReqIdResponse")]
        System.Data.DataTable GetSeriesGenerationByReqId(int ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetSeriesGenerationByReqId", ReplyAction="http://tempuri.org/ILTMSService/GetSeriesGenerationByReqIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSeriesGenerationByReqIdAsync(int ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetSeriesGenerationByReqIdSpecific", ReplyAction="http://tempuri.org/ILTMSService/GetSeriesGenerationByReqIdSpecificResponse")]
        System.Data.DataTable GetSeriesGenerationByReqIdSpecific(int ReqId, long Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetSeriesGenerationByReqIdSpecific", ReplyAction="http://tempuri.org/ILTMSService/GetSeriesGenerationByReqIdSpecificResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSeriesGenerationByReqIdSpecificAsync(int ReqId, long Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetSeriesGenerationListByReqId", ReplyAction="http://tempuri.org/ILTMSService/GetSeriesGenerationListByReqIdResponse")]
        System.Data.DataTable GetSeriesGenerationListByReqId(int ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetSeriesGenerationListByReqId", ReplyAction="http://tempuri.org/ILTMSService/GetSeriesGenerationListByReqIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSeriesGenerationListByReqIdAsync(int ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetSeriesGenerationByReqIdAndSr1End", ReplyAction="http://tempuri.org/ILTMSService/GetSeriesGenerationByReqIdAndSr1EndResponse")]
        System.Data.DataTable GetSeriesGenerationByReqIdAndSr1End(int ReqId, long Sr1End);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetSeriesGenerationByReqIdAndSr1End", ReplyAction="http://tempuri.org/ILTMSService/GetSeriesGenerationByReqIdAndSr1EndResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSeriesGenerationByReqIdAndSr1EndAsync(int ReqId, long Sr1End);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInSeriesGeneration", ReplyAction="http://tempuri.org/ILTMSService/DeleteInSeriesGenerationResponse")]
        bool DeleteInSeriesGeneration(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInSeriesGeneration", ReplyAction="http://tempuri.org/ILTMSService/DeleteInSeriesGenerationResponse")]
        System.Threading.Tasks.Task<bool> DeleteInSeriesGenerationAsync(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInZipProgress", ReplyAction="http://tempuri.org/ILTMSService/InsertInZipProgressResponse")]
        LTMSWebApp.LTMSServiceRef.InsertInZipProgressResponse InsertInZipProgress(LTMSWebApp.LTMSServiceRef.InsertInZipProgressRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInZipProgress", ReplyAction="http://tempuri.org/ILTMSService/InsertInZipProgressResponse")]
        System.Threading.Tasks.Task<LTMSWebApp.LTMSServiceRef.InsertInZipProgressResponse> InsertInZipProgressAsync(LTMSWebApp.LTMSServiceRef.InsertInZipProgressRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInZipProgress", ReplyAction="http://tempuri.org/ILTMSService/UpdateInZipProgressResponse")]
        bool UpdateInZipProgress(LTMSClass.ZipProgressMaster objZipProgress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInZipProgress", ReplyAction="http://tempuri.org/ILTMSService/UpdateInZipProgressResponse")]
        System.Threading.Tasks.Task<bool> UpdateInZipProgressAsync(LTMSClass.ZipProgressMaster objZipProgress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInZipProgress", ReplyAction="http://tempuri.org/ILTMSService/DeleteInZipProgressResponse")]
        bool DeleteInZipProgress(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInZipProgress", ReplyAction="http://tempuri.org/ILTMSService/DeleteInZipProgressResponse")]
        System.Threading.Tasks.Task<bool> DeleteInZipProgressAsync(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetZipProgressById", ReplyAction="http://tempuri.org/ILTMSService/GetZipProgressByIdResponse")]
        System.Data.DataTable GetZipProgressById(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetZipProgressById", ReplyAction="http://tempuri.org/ILTMSService/GetZipProgressByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetZipProgressByIdAsync(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInLottery", ReplyAction="http://tempuri.org/ILTMSService/InsertInLotteryResponse")]
        bool InsertInLottery(LTMSClass.ClsLottery objLottery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInLottery", ReplyAction="http://tempuri.org/ILTMSService/InsertInLotteryResponse")]
        System.Threading.Tasks.Task<bool> InsertInLotteryAsync(LTMSClass.ClsLottery objLottery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInLottery", ReplyAction="http://tempuri.org/ILTMSService/UpdateInLotteryResponse")]
        bool UpdateInLottery(LTMSClass.ClsLottery objLottery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInLottery", ReplyAction="http://tempuri.org/ILTMSService/UpdateInLotteryResponse")]
        System.Threading.Tasks.Task<bool> UpdateInLotteryAsync(LTMSClass.ClsLottery objLottery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryDtl", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryDtlResponse")]
        System.Data.DataTable GetLotteryDtl();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryDtl", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryDtlResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryDtlAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryDtlByIdResponse")]
        System.Data.DataTable GetLotteryDtlById(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryDtlByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryDtlByIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInLottery", ReplyAction="http://tempuri.org/ILTMSService/DeleteInLotteryResponse")]
        bool DeleteInLottery(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInLottery", ReplyAction="http://tempuri.org/ILTMSService/DeleteInLotteryResponse")]
        System.Threading.Tasks.Task<bool> DeleteInLotteryAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryDtlByLotteryTypeId", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryDtlByLotteryTypeIdResponse")]
        System.Data.DataTable GetLotteryDtlByLotteryTypeId(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryDtlByLotteryTypeId", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryDtlByLotteryTypeIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryDtlByLotteryTypeIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryDtlByName", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryDtlByNameResponse")]
        System.Data.DataTable GetLotteryDtlByName(string LotteryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryDtlByName", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryDtlByNameResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryDtlByNameAsync(string LotteryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInLotteryType", ReplyAction="http://tempuri.org/ILTMSService/InsertInLotteryTypeResponse")]
        bool InsertInLotteryType(LTMSClass.ClsLotteryType objLotteryType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInLotteryType", ReplyAction="http://tempuri.org/ILTMSService/InsertInLotteryTypeResponse")]
        System.Threading.Tasks.Task<bool> InsertInLotteryTypeAsync(LTMSClass.ClsLotteryType objLotteryType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInLotteryType", ReplyAction="http://tempuri.org/ILTMSService/UpdateInLotteryTypeResponse")]
        bool UpdateInLotteryType(LTMSClass.ClsLotteryType objLotteryType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInLotteryType", ReplyAction="http://tempuri.org/ILTMSService/UpdateInLotteryTypeResponse")]
        System.Threading.Tasks.Task<bool> UpdateInLotteryTypeAsync(LTMSClass.ClsLotteryType objLotteryType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryTypeDtl", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryTypeDtlResponse")]
        System.Data.DataTable GetLotteryTypeDtl();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryTypeDtl", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryTypeDtlResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryTypeDtlAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryTypeDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryTypeDtlByIdResponse")]
        System.Data.DataTable GetLotteryTypeDtlById(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryTypeDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryTypeDtlByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryTypeDtlByIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInLotteryType", ReplyAction="http://tempuri.org/ILTMSService/DeleteInLotteryTypeResponse")]
        bool DeleteInLotteryType(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInLotteryType", ReplyAction="http://tempuri.org/ILTMSService/DeleteInLotteryTypeResponse")]
        System.Threading.Tasks.Task<bool> DeleteInLotteryTypeAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInGovermentOrder", ReplyAction="http://tempuri.org/ILTMSService/InsertInGovermentOrderResponse")]
        bool InsertInGovermentOrder(LTMSClass.ClsGovermentOrder objGovermentOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInGovermentOrder", ReplyAction="http://tempuri.org/ILTMSService/InsertInGovermentOrderResponse")]
        System.Threading.Tasks.Task<bool> InsertInGovermentOrderAsync(LTMSClass.ClsGovermentOrder objGovermentOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInGovermentOrder", ReplyAction="http://tempuri.org/ILTMSService/UpdateInGovermentOrderResponse")]
        bool UpdateInGovermentOrder(LTMSClass.ClsGovermentOrder objGovermentOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInGovermentOrder", ReplyAction="http://tempuri.org/ILTMSService/UpdateInGovermentOrderResponse")]
        System.Threading.Tasks.Task<bool> UpdateInGovermentOrderAsync(LTMSClass.ClsGovermentOrder objGovermentOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetGovermentOrderDtl", ReplyAction="http://tempuri.org/ILTMSService/GetGovermentOrderDtlResponse")]
        System.Data.DataTable GetGovermentOrderDtl();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetGovermentOrderDtl", ReplyAction="http://tempuri.org/ILTMSService/GetGovermentOrderDtlResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetGovermentOrderDtlAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetGovermentOrderDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetGovermentOrderDtlByIdResponse")]
        System.Data.DataTable GetGovermentOrderDtlById(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetGovermentOrderDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetGovermentOrderDtlByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetGovermentOrderDtlByIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetGovOrderDtlByLotteryId", ReplyAction="http://tempuri.org/ILTMSService/GetGovOrderDtlByLotteryIdResponse")]
        System.Data.DataTable GetGovOrderDtlByLotteryId(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetGovOrderDtlByLotteryId", ReplyAction="http://tempuri.org/ILTMSService/GetGovOrderDtlByLotteryIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetGovOrderDtlByLotteryIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInGovermentOrder", ReplyAction="http://tempuri.org/ILTMSService/DeleteInGovermentOrderResponse")]
        bool DeleteInGovermentOrder(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInGovermentOrder", ReplyAction="http://tempuri.org/ILTMSService/DeleteInGovermentOrderResponse")]
        System.Threading.Tasks.Task<bool> DeleteInGovermentOrderAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetGovermentOrderDtlbyStatus", ReplyAction="http://tempuri.org/ILTMSService/GetGovermentOrderDtlbyStatusResponse")]
        System.Data.DataTable GetGovermentOrderDtlbyStatus(int InStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetGovermentOrderDtlbyStatus", ReplyAction="http://tempuri.org/ILTMSService/GetGovermentOrderDtlbyStatusResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetGovermentOrderDtlbyStatusAsync(int InStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryByApprovedGovOrder", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryByApprovedGovOrderResponse")]
        System.Data.DataTable GetLotteryByApprovedGovOrder(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryByApprovedGovOrder", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryByApprovedGovOrderResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryByApprovedGovOrderAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDepositToDtl", ReplyAction="http://tempuri.org/ILTMSService/GetDepositToDtlResponse")]
        System.Data.DataTable GetDepositToDtl();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDepositToDtl", ReplyAction="http://tempuri.org/ILTMSService/GetDepositToDtlResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDepositToDtlAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInUserRole", ReplyAction="http://tempuri.org/ILTMSService/InsertInUserRoleResponse")]
        bool InsertInUserRole(LTMSClass.ClsUserRole objUserRole, System.Data.DataTable dtUserAccessMenuDtl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInUserRole", ReplyAction="http://tempuri.org/ILTMSService/InsertInUserRoleResponse")]
        System.Threading.Tasks.Task<bool> InsertInUserRoleAsync(LTMSClass.ClsUserRole objUserRole, System.Data.DataTable dtUserAccessMenuDtl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInUserRole", ReplyAction="http://tempuri.org/ILTMSService/UpdateInUserRoleResponse")]
        bool UpdateInUserRole(LTMSClass.ClsUserRole objUserRole, System.Data.DataTable dtUserAccessMenuDtl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInUserRole", ReplyAction="http://tempuri.org/ILTMSService/UpdateInUserRoleResponse")]
        System.Threading.Tasks.Task<bool> UpdateInUserRoleAsync(LTMSClass.ClsUserRole objUserRole, System.Data.DataTable dtUserAccessMenuDtl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetUserRoleDtl", ReplyAction="http://tempuri.org/ILTMSService/GetUserRoleDtlResponse")]
        System.Data.DataTable GetUserRoleDtl();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetUserRoleDtl", ReplyAction="http://tempuri.org/ILTMSService/GetUserRoleDtlResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetUserRoleDtlAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetUserRoleDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetUserRoleDtlByIdResponse")]
        System.Data.DataTable GetUserRoleDtlById(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetUserRoleDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetUserRoleDtlByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetUserRoleDtlByIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInUserRole", ReplyAction="http://tempuri.org/ILTMSService/DeleteInUserRoleResponse")]
        bool DeleteInUserRole(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInUserRole", ReplyAction="http://tempuri.org/ILTMSService/DeleteInUserRoleResponse")]
        System.Threading.Tasks.Task<bool> DeleteInUserRoleAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetGetMenuListForUserRole", ReplyAction="http://tempuri.org/ILTMSService/GetGetMenuListForUserRoleResponse")]
        System.Data.DataTable GetGetMenuListForUserRole(long InUserRoleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetGetMenuListForUserRole", ReplyAction="http://tempuri.org/ILTMSService/GetGetMenuListForUserRoleResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetGetMenuListForUserRoleAsync(long InUserRoleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetNavMenuListForUserRoleId", ReplyAction="http://tempuri.org/ILTMSService/GetNavMenuListForUserRoleIdResponse")]
        System.Data.DataTable GetNavMenuListForUserRoleId(long InUserRoleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetNavMenuListForUserRoleId", ReplyAction="http://tempuri.org/ILTMSService/GetNavMenuListForUserRoleIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetNavMenuListForUserRoleIdAsync(long InUserRoleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInPrize", ReplyAction="http://tempuri.org/ILTMSService/InsertInPrizeResponse")]
        bool InsertInPrize(LTMSClass.ClsPrize objPrize, System.Data.DataTable dtPrizeDtl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInPrize", ReplyAction="http://tempuri.org/ILTMSService/InsertInPrizeResponse")]
        System.Threading.Tasks.Task<bool> InsertInPrizeAsync(LTMSClass.ClsPrize objPrize, System.Data.DataTable dtPrizeDtl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInPrize", ReplyAction="http://tempuri.org/ILTMSService/UpdateInPrizeResponse")]
        bool UpdateInPrize(LTMSClass.ClsPrize objPrize, System.Data.DataTable dtPrizeDtl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInPrize", ReplyAction="http://tempuri.org/ILTMSService/UpdateInPrizeResponse")]
        System.Threading.Tasks.Task<bool> UpdateInPrizeAsync(LTMSClass.ClsPrize objPrize, System.Data.DataTable dtPrizeDtl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetPrizeDtl", ReplyAction="http://tempuri.org/ILTMSService/GetPrizeDtlResponse")]
        System.Data.DataTable GetPrizeDtl();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetPrizeDtl", ReplyAction="http://tempuri.org/ILTMSService/GetPrizeDtlResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetPrizeDtlAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetPrizeDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetPrizeDtlByIdResponse")]
        System.Data.DataSet GetPrizeDtlById(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetPrizeDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetPrizeDtlByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPrizeDtlByIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInPrize", ReplyAction="http://tempuri.org/ILTMSService/DeleteInPrizeResponse")]
        bool DeleteInPrize(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInPrize", ReplyAction="http://tempuri.org/ILTMSService/DeleteInPrizeResponse")]
        System.Threading.Tasks.Task<bool> DeleteInPrizeAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetWinnePrizeWinningSlNoDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetWinnePrizeWinningSlNoDtlByIdResponse")]
        System.Data.DataTable GetWinnePrizeWinningSlNoDtlById(long InDataUniqueId, short RowNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetWinnePrizeWinningSlNoDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetWinnePrizeWinningSlNoDtlByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetWinnePrizeWinningSlNoDtlByIdAsync(long InDataUniqueId, short RowNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryWiningSerialNoDtlByLotteryNo", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryWiningSerialNoDtlByLotteryNoResponse")]
        System.Data.DataSet GetLotteryWiningSerialNoDtlByLotteryNo(long InDataUniqueId, string LotteryNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryWiningSerialNoDtlByLotteryNo", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryWiningSerialNoDtlByLotteryNoResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetLotteryWiningSerialNoDtlByLotteryNoAsync(long InDataUniqueId, string LotteryNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInPrize", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInPrizeResponse")]
        bool UpdateApprovalInPrize(LTMSClass.ClsPrize objClsPrize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInPrize", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInPrizeResponse")]
        System.Threading.Tasks.Task<bool> UpdateApprovalInPrizeAsync(LTMSClass.ClsPrize objClsPrize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInPrizeWinner", ReplyAction="http://tempuri.org/ILTMSService/UpdateInPrizeWinnerResponse")]
        bool UpdateInPrizeWinner(LTMSClass.ClsPrizeWinner objPrizeWinner, System.Data.DataTable dtPrizeWinnerDtl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInPrizeWinner", ReplyAction="http://tempuri.org/ILTMSService/UpdateInPrizeWinnerResponse")]
        System.Threading.Tasks.Task<bool> UpdateInPrizeWinnerAsync(LTMSClass.ClsPrizeWinner objPrizeWinner, System.Data.DataTable dtPrizeWinnerDtl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetWinneListDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetWinneListDtlByIdResponse")]
        System.Data.DataTable GetWinneListDtlById(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetWinneListDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetWinneListDtlByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetWinneListDtlByIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetWinneEntryDtlByRequisitionId", ReplyAction="http://tempuri.org/ILTMSService/GetWinneEntryDtlByRequisitionIdResponse")]
        System.Data.DataTable GetWinneEntryDtlByRequisitionId(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetWinneEntryDtlByRequisitionId", ReplyAction="http://tempuri.org/ILTMSService/GetWinneEntryDtlByRequisitionIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetWinneEntryDtlByRequisitionIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInReqWinnerPrize", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInReqWinnerPrizeResponse")]
        bool UpdateApprovalInReqWinnerPrize(LTMSClass.ClsRequisition objRequisition, string ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInReqWinnerPrize", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInReqWinnerPrizeResponse")]
        System.Threading.Tasks.Task<bool> UpdateApprovalInReqWinnerPrizeAsync(LTMSClass.ClsRequisition objRequisition, string ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetWinnigSlNoDtlByRequisitionId", ReplyAction="http://tempuri.org/ILTMSService/GetWinnigSlNoDtlByRequisitionIdResponse")]
        System.Data.DataSet GetWinnigSlNoDtlByRequisitionId(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetWinnigSlNoDtlByRequisitionId", ReplyAction="http://tempuri.org/ILTMSService/GetWinnigSlNoDtlByRequisitionIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetWinnigSlNoDtlByRequisitionIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInUser", ReplyAction="http://tempuri.org/ILTMSService/InsertInUserResponse")]
        bool InsertInUser(LTMSClass.ClsUser objUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInUser", ReplyAction="http://tempuri.org/ILTMSService/InsertInUserResponse")]
        System.Threading.Tasks.Task<bool> InsertInUserAsync(LTMSClass.ClsUser objUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInUser", ReplyAction="http://tempuri.org/ILTMSService/UpdateInUserResponse")]
        bool UpdateInUser(LTMSClass.ClsUser objUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInUser", ReplyAction="http://tempuri.org/ILTMSService/UpdateInUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateInUserAsync(LTMSClass.ClsUser objUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetUserDtl", ReplyAction="http://tempuri.org/ILTMSService/GetUserDtlResponse")]
        System.Data.DataTable GetUserDtl();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetUserDtl", ReplyAction="http://tempuri.org/ILTMSService/GetUserDtlResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetUserDtlAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetUserDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetUserDtlByIdResponse")]
        System.Data.DataTable GetUserDtlById(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetUserDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetUserDtlByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetUserDtlByIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInUser", ReplyAction="http://tempuri.org/ILTMSService/DeleteInUserResponse")]
        bool DeleteInUser(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInUser", ReplyAction="http://tempuri.org/ILTMSService/DeleteInUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteInUserAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetIsValidUser", ReplyAction="http://tempuri.org/ILTMSService/GetIsValidUserResponse")]
        System.Data.DataTable GetIsValidUser(string UserId, string UserPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetIsValidUser", ReplyAction="http://tempuri.org/ILTMSService/GetIsValidUserResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetIsValidUserAsync(string UserId, string UserPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateUserPassword", ReplyAction="http://tempuri.org/ILTMSService/UpdateUserPasswordResponse")]
        bool UpdateUserPassword(LTMSClass.ClsUser objUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateUserPassword", ReplyAction="http://tempuri.org/ILTMSService/UpdateUserPasswordResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserPasswordAsync(LTMSClass.ClsUser objUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetUserDtlByEmailOrMobile", ReplyAction="http://tempuri.org/ILTMSService/GetUserDtlByEmailOrMobileResponse")]
        System.Data.DataTable GetUserDtlByEmailOrMobile(string EmailId, string MobileNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetUserDtlByEmailOrMobile", ReplyAction="http://tempuri.org/ILTMSService/GetUserDtlByEmailOrMobileResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetUserDtlByEmailOrMobileAsync(string EmailId, string MobileNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetIsMenuAccessAvailable", ReplyAction="http://tempuri.org/ILTMSService/GetIsMenuAccessAvailableResponse")]
        System.Data.DataTable GetIsMenuAccessAvailable(long InUserRoleId, string InMenuCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetIsMenuAccessAvailable", ReplyAction="http://tempuri.org/ILTMSService/GetIsMenuAccessAvailableResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetIsMenuAccessAvailableAsync(long InUserRoleId, string InMenuCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetUserDtlByUserId", ReplyAction="http://tempuri.org/ILTMSService/GetUserDtlByUserIdResponse")]
        System.Data.DataTable GetUserDtlByUserId(string InUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetUserDtlByUserId", ReplyAction="http://tempuri.org/ILTMSService/GetUserDtlByUserIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetUserDtlByUserIdAsync(string InUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInDealerDeposit", ReplyAction="http://tempuri.org/ILTMSService/InsertInDealerDepositResponse")]
        bool InsertInDealerDeposit(LTMSClass.ClsDealerDeposit objDealerDeposit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInDealerDeposit", ReplyAction="http://tempuri.org/ILTMSService/InsertInDealerDepositResponse")]
        System.Threading.Tasks.Task<bool> InsertInDealerDepositAsync(LTMSClass.ClsDealerDeposit objDealerDeposit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInDealerDeposit", ReplyAction="http://tempuri.org/ILTMSService/UpdateInDealerDepositResponse")]
        bool UpdateInDealerDeposit(LTMSClass.ClsDealerDeposit objDealerDeposit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInDealerDeposit", ReplyAction="http://tempuri.org/ILTMSService/UpdateInDealerDepositResponse")]
        System.Threading.Tasks.Task<bool> UpdateInDealerDepositAsync(LTMSClass.ClsDealerDeposit objDealerDeposit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDealerDepositViewDtl", ReplyAction="http://tempuri.org/ILTMSService/GetDealerDepositViewDtlResponse")]
        System.Data.DataTable GetDealerDepositViewDtl(LTMSClass.clsInputParameter objInputParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDealerDepositViewDtl", ReplyAction="http://tempuri.org/ILTMSService/GetDealerDepositViewDtlResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDealerDepositViewDtlAsync(LTMSClass.clsInputParameter objInputParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDealerDepositDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetDealerDepositDtlByIdResponse")]
        System.Data.DataTable GetDealerDepositDtlById(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDealerDepositDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetDealerDepositDtlByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDealerDepositDtlByIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInDealerDeposit", ReplyAction="http://tempuri.org/ILTMSService/DeleteInDealerDepositResponse")]
        bool DeleteInDealerDeposit(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInDealerDeposit", ReplyAction="http://tempuri.org/ILTMSService/DeleteInDealerDepositResponse")]
        System.Threading.Tasks.Task<bool> DeleteInDealerDepositAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/SpGetDealerDepositReconDtlByStatus", ReplyAction="http://tempuri.org/ILTMSService/SpGetDealerDepositReconDtlByStatusResponse")]
        System.Data.DataTable SpGetDealerDepositReconDtlByStatus(string InReconStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/SpGetDealerDepositReconDtlByStatus", ReplyAction="http://tempuri.org/ILTMSService/SpGetDealerDepositReconDtlByStatusResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> SpGetDealerDepositReconDtlByStatusAsync(string InReconStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateReconInDealerDeposit", ReplyAction="http://tempuri.org/ILTMSService/UpdateReconInDealerDepositResponse")]
        bool UpdateReconInDealerDeposit(LTMSClass.ClsDealerDeposit objDealerDeposit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateReconInDealerDeposit", ReplyAction="http://tempuri.org/ILTMSService/UpdateReconInDealerDepositResponse")]
        System.Threading.Tasks.Task<bool> UpdateReconInDealerDepositAsync(LTMSClass.ClsDealerDeposit objDealerDeposit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDealerDepositViewForApprovalDtl", ReplyAction="http://tempuri.org/ILTMSService/GetDealerDepositViewForApprovalDtlResponse")]
        System.Data.DataTable GetDealerDepositViewForApprovalDtl(LTMSClass.clsInputParameter objInputParameter, int DepositToId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDealerDepositViewForApprovalDtl", ReplyAction="http://tempuri.org/ILTMSService/GetDealerDepositViewForApprovalDtlResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDealerDepositViewForApprovalDtlAsync(LTMSClass.clsInputParameter objInputParameter, int DepositToId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInDealerDeposit", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInDealerDepositResponse")]
        bool UpdateApprovalInDealerDeposit(LTMSClass.ClsDealerDeposit objDealerDeposit, string ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInDealerDeposit", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInDealerDepositResponse")]
        System.Threading.Tasks.Task<bool> UpdateApprovalInDealerDepositAsync(LTMSClass.ClsDealerDeposit objDealerDeposit, string ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInReqDealerDeposit", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInReqDealerDepositResponse")]
        bool UpdateApprovalInReqDealerDeposit(LTMSClass.ClsRequisition objRequisition, string ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInReqDealerDeposit", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInReqDealerDepositResponse")]
        System.Threading.Tasks.Task<bool> UpdateApprovalInReqDealerDepositAsync(LTMSClass.ClsRequisition objRequisition, string ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDealerDepositInHandDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetDealerDepositInHandDtlByIdResponse")]
        System.Data.DataSet GetDealerDepositInHandDtlById(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDealerDepositInHandDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetDealerDepositInHandDtlByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDealerDepositInHandDtlByIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDealerDepositDtlByReqId", ReplyAction="http://tempuri.org/ILTMSService/GetDealerDepositDtlByReqIdResponse")]
        System.Data.DataTable GetDealerDepositDtlByReqId(long InRequsitionId, short status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDealerDepositDtlByReqId", ReplyAction="http://tempuri.org/ILTMSService/GetDealerDepositDtlByReqIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDealerDepositDtlByReqIdAsync(long InRequsitionId, short status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDepositMethodDetails", ReplyAction="http://tempuri.org/ILTMSService/GetDepositMethodDetailsResponse")]
        System.Data.DataTable GetDepositMethodDetails();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDepositMethodDetails", ReplyAction="http://tempuri.org/ILTMSService/GetDepositMethodDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDepositMethodDetailsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetEmailToDtlByType", ReplyAction="http://tempuri.org/ILTMSService/GetEmailToDtlByTypeResponse")]
        System.Data.DataTable GetEmailToDtlByType(string EmailType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetEmailToDtlByType", ReplyAction="http://tempuri.org/ILTMSService/GetEmailToDtlByTypeResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetEmailToDtlByTypeAsync(string EmailType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInRequisition", ReplyAction="http://tempuri.org/ILTMSService/InsertInRequisitionResponse")]
        LTMSWebApp.LTMSServiceRef.InsertInRequisitionResponse InsertInRequisition(LTMSWebApp.LTMSServiceRef.InsertInRequisitionRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/InsertInRequisition", ReplyAction="http://tempuri.org/ILTMSService/InsertInRequisitionResponse")]
        System.Threading.Tasks.Task<LTMSWebApp.LTMSServiceRef.InsertInRequisitionResponse> InsertInRequisitionAsync(LTMSWebApp.LTMSServiceRef.InsertInRequisitionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInRequisition", ReplyAction="http://tempuri.org/ILTMSService/UpdateInRequisitionResponse")]
        bool UpdateInRequisition(LTMSClass.ClsRequisition objRequisition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateInRequisition", ReplyAction="http://tempuri.org/ILTMSService/UpdateInRequisitionResponse")]
        System.Threading.Tasks.Task<bool> UpdateInRequisitionAsync(LTMSClass.ClsRequisition objRequisition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateCloseTransactionInRequisition", ReplyAction="http://tempuri.org/ILTMSService/UpdateCloseTransactionInRequisitionResponse")]
        bool UpdateCloseTransactionInRequisition(LTMSClass.ClsRequisition objRequisition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateCloseTransactionInRequisition", ReplyAction="http://tempuri.org/ILTMSService/UpdateCloseTransactionInRequisitionResponse")]
        System.Threading.Tasks.Task<bool> UpdateCloseTransactionInRequisitionAsync(LTMSClass.ClsRequisition objRequisition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateSendForAdjustment", ReplyAction="http://tempuri.org/ILTMSService/UpdateSendForAdjustmentResponse")]
        bool UpdateSendForAdjustment(LTMSClass.ClsRequisition objRequisition, string ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateSendForAdjustment", ReplyAction="http://tempuri.org/ILTMSService/UpdateSendForAdjustmentResponse")]
        System.Threading.Tasks.Task<bool> UpdateSendForAdjustmentAsync(LTMSClass.ClsRequisition objRequisition, string ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetSentAdjustmentDtlByTranNo", ReplyAction="http://tempuri.org/ILTMSService/GetSentAdjustmentDtlByTranNoResponse")]
        System.Data.DataTable GetSentAdjustmentDtlByTranNo(int DataUniqueId, int TransactionNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetSentAdjustmentDtlByTranNo", ReplyAction="http://tempuri.org/ILTMSService/GetSentAdjustmentDtlByTranNoResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSentAdjustmentDtlByTranNoAsync(int DataUniqueId, int TransactionNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetAdjustmentDtlByRequisitionId", ReplyAction="http://tempuri.org/ILTMSService/GetAdjustmentDtlByRequisitionIdResponse")]
        System.Data.DataTable GetAdjustmentDtlByRequisitionId(int DataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetAdjustmentDtlByRequisitionId", ReplyAction="http://tempuri.org/ILTMSService/GetAdjustmentDtlByRequisitionIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAdjustmentDtlByRequisitionIdAsync(int DataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitionDtl", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitionDtlResponse")]
        System.Data.DataTable GetRequisitionDtl(LTMSClass.clsInputParameter objInputParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitionDtl", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitionDtlResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitionDtlAsync(LTMSClass.clsInputParameter objInputParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitionDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitionDtlByIdResponse")]
        System.Data.DataTable GetRequisitionDtlById(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitionDtlById", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitionDtlByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitionDtlByIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInRequisition", ReplyAction="http://tempuri.org/ILTMSService/DeleteInRequisitionResponse")]
        bool DeleteInRequisition(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/DeleteInRequisition", ReplyAction="http://tempuri.org/ILTMSService/DeleteInRequisitionResponse")]
        System.Threading.Tasks.Task<bool> DeleteInRequisitionAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitionDtlByStatus", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitionDtlByStatusResponse")]
        System.Data.DataTable GetRequisitionDtlByStatus(LTMSClass.clsInputParameter objInputParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitionDtlByStatus", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitionDtlByStatusResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitionDtlByStatusAsync(LTMSClass.clsInputParameter objInputParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitiondataForDDL", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitiondataForDDLResponse")]
        System.Data.DataTable GetRequisitiondataForDDL(int SaveStatus, int Opmode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitiondataForDDL", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitiondataForDDLResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitiondataForDDLAsync(int SaveStatus, int Opmode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetBankGuranteeLedger", ReplyAction="http://tempuri.org/ILTMSService/GetBankGuranteeLedgerResponse")]
        System.Data.DataTable GetBankGuranteeLedger(LTMSClass.clsInputParameter objInputParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetBankGuranteeLedger", ReplyAction="http://tempuri.org/ILTMSService/GetBankGuranteeLedgerResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetBankGuranteeLedgerAsync(LTMSClass.clsInputParameter objInputParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInRequisition", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInRequisitionResponse")]
        bool UpdateApprovalInRequisition(LTMSClass.ClsRequisition objRequisition, string ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInRequisition", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInRequisitionResponse")]
        System.Threading.Tasks.Task<bool> UpdateApprovalInRequisitionAsync(LTMSClass.ClsRequisition objRequisition, string ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInRequisitionUnSoldTicket", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInRequisitionUnSoldTicketResponse")]
        bool UpdateApprovalInRequisitionUnSoldTicket(LTMSClass.ClsRequisition objRequisition, string ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInRequisitionUnSoldTicket", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInRequisitionUnSoldTicketResponse")]
        System.Threading.Tasks.Task<bool> UpdateApprovalInRequisitionUnSoldTicketAsync(LTMSClass.ClsRequisition objRequisition, string ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInRequisitionUnClaimTicket", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInRequisitionUnClaimTicketResponse")]
        bool UpdateApprovalInRequisitionUnClaimTicket(LTMSClass.ClsRequisition objRequisition, string ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/UpdateApprovalInRequisitionUnClaimTicket", ReplyAction="http://tempuri.org/ILTMSService/UpdateApprovalInRequisitionUnClaimTicketResponse")]
        System.Threading.Tasks.Task<bool> UpdateApprovalInRequisitionUnClaimTicketAsync(LTMSClass.ClsRequisition objRequisition, string ReqId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitionDtlByStatusForDealerReq", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitionDtlByStatusForDealerReqResponse")]
        System.Data.DataTable GetRequisitionDtlByStatusForDealerReq(int InStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetRequisitionDtlByStatusForDealerReq", ReplyAction="http://tempuri.org/ILTMSService/GetRequisitionDtlByStatusForDealerReqResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitionDtlByStatusForDealerReqAsync(int InStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDirectorRequisitionDtlByDealerReqId", ReplyAction="http://tempuri.org/ILTMSService/GetDirectorRequisitionDtlByDealerReqIdResponse")]
        System.Data.DataTable GetDirectorRequisitionDtlByDealerReqId(long DataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetDirectorRequisitionDtlByDealerReqId", ReplyAction="http://tempuri.org/ILTMSService/GetDirectorRequisitionDtlByDealerReqIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDirectorRequisitionDtlByDealerReqIdAsync(long DataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLastDrawDateAndNoDtlByLotteryId", ReplyAction="http://tempuri.org/ILTMSService/GetLastDrawDateAndNoDtlByLotteryIdResponse")]
        System.Data.DataTable GetLastDrawDateAndNoDtlByLotteryId(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLastDrawDateAndNoDtlByLotteryId", ReplyAction="http://tempuri.org/ILTMSService/GetLastDrawDateAndNoDtlByLotteryIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLastDrawDateAndNoDtlByLotteryIdAsync(long InDataUniqueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryDtlFromRequisitionDtl", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryDtlFromRequisitionDtlResponse")]
        System.Data.DataTable GetLotteryDtlFromRequisitionDtl(long InLotteryId, System.Nullable<int> InDrawNo, System.Nullable<System.DateTime> InDrawDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryDtlFromRequisitionDtl", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryDtlFromRequisitionDtlResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryDtlFromRequisitionDtlAsync(long InLotteryId, System.Nullable<int> InDrawNo, System.Nullable<System.DateTime> InDrawDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryDtlInClaimAndUnSold", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryDtlInClaimAndUnSoldResponse")]
        System.Data.DataSet GetLotteryDtlInClaimAndUnSold(long InDataUniqueId, string InLotteryNo, int FnNo, string Alphabet, long TnNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILTMSService/GetLotteryDtlInClaimAndUnSold", ReplyAction="http://tempuri.org/ILTMSService/GetLotteryDtlInClaimAndUnSoldResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetLotteryDtlInClaimAndUnSoldAsync(long InDataUniqueId, string InLotteryNo, int FnNo, string Alphabet, long TnNo);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertInRequisitionDealer", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertInRequisitionDealerRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public LTMSClass.ClsRequisition objRequisition;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Data.DataTable tblDirectorRequisitionDtl;
        
        public InsertInRequisitionDealerRequest() {
        }
        
        public InsertInRequisitionDealerRequest(LTMSClass.ClsRequisition objRequisition, System.Data.DataTable tblDirectorRequisitionDtl) {
            this.objRequisition = objRequisition;
            this.tblDirectorRequisitionDtl = tblDirectorRequisitionDtl;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertInRequisitionDealerResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertInRequisitionDealerResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool InsertInRequisitionDealerResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string TransactionNo;
        
        public InsertInRequisitionDealerResponse() {
        }
        
        public InsertInRequisitionDealerResponse(bool InsertInRequisitionDealerResult, string TransactionNo) {
            this.InsertInRequisitionDealerResult = InsertInRequisitionDealerResult;
            this.TransactionNo = TransactionNo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InserInLotteryClaimEntry", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InserInLotteryClaimEntryRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public LTMSClass.ClsLotteryClaimDetails objClsLotteryClaimDetails;
        
        public InserInLotteryClaimEntryRequest() {
        }
        
        public InserInLotteryClaimEntryRequest(LTMSClass.ClsLotteryClaimDetails objClsLotteryClaimDetails) {
            this.objClsLotteryClaimDetails = objClsLotteryClaimDetails;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InserInLotteryClaimEntryResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InserInLotteryClaimEntryResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool InserInLotteryClaimEntryResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string TransactionNo;
        
        public InserInLotteryClaimEntryResponse() {
        }
        
        public InserInLotteryClaimEntryResponse(bool InserInLotteryClaimEntryResult, string TransactionNo) {
            this.InserInLotteryClaimEntryResult = InserInLotteryClaimEntryResult;
            this.TransactionNo = TransactionNo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateLotteryClaimEntrySendToGov", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateLotteryClaimEntrySendToGovRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public LTMSClass.ClsRequisition objRequisition;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string ReqId;
        
        public UpdateLotteryClaimEntrySendToGovRequest() {
        }
        
        public UpdateLotteryClaimEntrySendToGovRequest(LTMSClass.ClsRequisition objRequisition, string ReqId) {
            this.objRequisition = objRequisition;
            this.ReqId = ReqId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateLotteryClaimEntrySendToGovResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateLotteryClaimEntrySendToGovResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool UpdateLotteryClaimEntrySendToGovResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string TransactionNo;
        
        public UpdateLotteryClaimEntrySendToGovResponse() {
        }
        
        public UpdateLotteryClaimEntrySendToGovResponse(bool UpdateLotteryClaimEntrySendToGovResult, string TransactionNo) {
            this.UpdateLotteryClaimEntrySendToGovResult = UpdateLotteryClaimEntrySendToGovResult;
            this.TransactionNo = TransactionNo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InserInRequisitionChallan", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InserInRequisitionChallanRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public LTMSClass.ClsChallan objChallan;
        
        public InserInRequisitionChallanRequest() {
        }
        
        public InserInRequisitionChallanRequest(LTMSClass.ClsChallan objChallan) {
            this.objChallan = objChallan;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InserInRequisitionChallanResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InserInRequisitionChallanResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool InserInRequisitionChallanResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string TransactionNo;
        
        public InserInRequisitionChallanResponse() {
        }
        
        public InserInRequisitionChallanResponse(bool InserInRequisitionChallanResult, string TransactionNo) {
            this.InserInRequisitionChallanResult = InserInRequisitionChallanResult;
            this.TransactionNo = TransactionNo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertInSeriesGeneration", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertInSeriesGenerationRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public LTMSClass.ClsSeriesGeneration obj;
        
        public InsertInSeriesGenerationRequest() {
        }
        
        public InsertInSeriesGenerationRequest(LTMSClass.ClsSeriesGeneration obj) {
            this.obj = obj;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertInSeriesGenerationResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertInSeriesGenerationResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool InsertInSeriesGenerationResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string InsertedID;
        
        public InsertInSeriesGenerationResponse() {
        }
        
        public InsertInSeriesGenerationResponse(bool InsertInSeriesGenerationResult, string InsertedID) {
            this.InsertInSeriesGenerationResult = InsertInSeriesGenerationResult;
            this.InsertedID = InsertedID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertInZipProgress", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertInZipProgressRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public LTMSClass.ZipProgressMaster objZipProgress;
        
        public InsertInZipProgressRequest() {
        }
        
        public InsertInZipProgressRequest(LTMSClass.ZipProgressMaster objZipProgress) {
            this.objZipProgress = objZipProgress;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertInZipProgressResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertInZipProgressResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool InsertInZipProgressResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string ZipID;
        
        public InsertInZipProgressResponse() {
        }
        
        public InsertInZipProgressResponse(bool InsertInZipProgressResult, string ZipID) {
            this.InsertInZipProgressResult = InsertInZipProgressResult;
            this.ZipID = ZipID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertInRequisition", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertInRequisitionRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public LTMSClass.ClsRequisition objRequisition;
        
        public InsertInRequisitionRequest() {
        }
        
        public InsertInRequisitionRequest(LTMSClass.ClsRequisition objRequisition) {
            this.objRequisition = objRequisition;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertInRequisitionResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertInRequisitionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool InsertInRequisitionResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string TransactionNo;
        
        public InsertInRequisitionResponse() {
        }
        
        public InsertInRequisitionResponse(bool InsertInRequisitionResult, string TransactionNo) {
            this.InsertInRequisitionResult = InsertInRequisitionResult;
            this.TransactionNo = TransactionNo;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILTMSServiceChannel : LTMSWebApp.LTMSServiceRef.ILTMSService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LTMSServiceClient : System.ServiceModel.ClientBase<LTMSWebApp.LTMSServiceRef.ILTMSService>, LTMSWebApp.LTMSServiceRef.ILTMSService {
        
        public LTMSServiceClient() {
        }
        
        public LTMSServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LTMSServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LTMSServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LTMSServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable GetUnSoldSummaryById(long InDataUniqueId) {
            return base.Channel.GetUnSoldSummaryById(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetUnSoldSummaryByIdAsync(long InDataUniqueId) {
            return base.Channel.GetUnSoldSummaryByIdAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable GetPrintOrderDtlById(long InDataUniqueId) {
            return base.Channel.GetPrintOrderDtlById(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetPrintOrderDtlByIdAsync(long InDataUniqueId) {
            return base.Channel.GetPrintOrderDtlByIdAsync(InDataUniqueId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LTMSWebApp.LTMSServiceRef.InsertInRequisitionDealerResponse LTMSWebApp.LTMSServiceRef.ILTMSService.InsertInRequisitionDealer(LTMSWebApp.LTMSServiceRef.InsertInRequisitionDealerRequest request) {
            return base.Channel.InsertInRequisitionDealer(request);
        }
        
        public bool InsertInRequisitionDealer(LTMSClass.ClsRequisition objRequisition, System.Data.DataTable tblDirectorRequisitionDtl, out string TransactionNo) {
            LTMSWebApp.LTMSServiceRef.InsertInRequisitionDealerRequest inValue = new LTMSWebApp.LTMSServiceRef.InsertInRequisitionDealerRequest();
            inValue.objRequisition = objRequisition;
            inValue.tblDirectorRequisitionDtl = tblDirectorRequisitionDtl;
            LTMSWebApp.LTMSServiceRef.InsertInRequisitionDealerResponse retVal = ((LTMSWebApp.LTMSServiceRef.ILTMSService)(this)).InsertInRequisitionDealer(inValue);
            TransactionNo = retVal.TransactionNo;
            return retVal.InsertInRequisitionDealerResult;
        }
        
        public System.Threading.Tasks.Task<LTMSWebApp.LTMSServiceRef.InsertInRequisitionDealerResponse> InsertInRequisitionDealerAsync(LTMSWebApp.LTMSServiceRef.InsertInRequisitionDealerRequest request) {
            return base.Channel.InsertInRequisitionDealerAsync(request);
        }
        
        public bool UpdateInRequisitionDealer(LTMSClass.ClsRequisition objRequisition, System.Data.DataTable tblDirectorRequisitionDtl) {
            return base.Channel.UpdateInRequisitionDealer(objRequisition, tblDirectorRequisitionDtl);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInRequisitionDealerAsync(LTMSClass.ClsRequisition objRequisition, System.Data.DataTable tblDirectorRequisitionDtl) {
            return base.Channel.UpdateInRequisitionDealerAsync(objRequisition, tblDirectorRequisitionDtl);
        }
        
        public System.Data.DataTable GetRequisitionDealerDtl(LTMSClass.clsInputParameter objInputParameter) {
            return base.Channel.GetRequisitionDealerDtl(objInputParameter);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitionDealerDtlAsync(LTMSClass.clsInputParameter objInputParameter) {
            return base.Channel.GetRequisitionDealerDtlAsync(objInputParameter);
        }
        
        public System.Data.DataTable GetRequisitionDealerDtlById(long InDataUniqueId) {
            return base.Channel.GetRequisitionDealerDtlById(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitionDealerDtlByIdAsync(long InDataUniqueId) {
            return base.Channel.GetRequisitionDealerDtlByIdAsync(InDataUniqueId);
        }
        
        public bool DeleteInRequisitionDealer(long InDataUniqueId) {
            return base.Channel.DeleteInRequisitionDealer(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteInRequisitionDealerAsync(long InDataUniqueId) {
            return base.Channel.DeleteInRequisitionDealerAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable GetRequisitionDealerDtlByStatus(LTMSClass.clsInputParameter objInputParameter) {
            return base.Channel.GetRequisitionDealerDtlByStatus(objInputParameter);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitionDealerDtlByStatusAsync(LTMSClass.clsInputParameter objInputParameter) {
            return base.Channel.GetRequisitionDealerDtlByStatusAsync(objInputParameter);
        }
        
        public bool UpdateApprovalInRequisitionDealer(LTMSClass.ClsRequisition objRequisition, string ReqId) {
            return base.Channel.UpdateApprovalInRequisitionDealer(objRequisition, ReqId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateApprovalInRequisitionDealerAsync(LTMSClass.ClsRequisition objRequisition, string ReqId) {
            return base.Channel.UpdateApprovalInRequisitionDealerAsync(objRequisition, ReqId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LTMSWebApp.LTMSServiceRef.InserInLotteryClaimEntryResponse LTMSWebApp.LTMSServiceRef.ILTMSService.InserInLotteryClaimEntry(LTMSWebApp.LTMSServiceRef.InserInLotteryClaimEntryRequest request) {
            return base.Channel.InserInLotteryClaimEntry(request);
        }
        
        public bool InserInLotteryClaimEntry(LTMSClass.ClsLotteryClaimDetails objClsLotteryClaimDetails, out string TransactionNo) {
            LTMSWebApp.LTMSServiceRef.InserInLotteryClaimEntryRequest inValue = new LTMSWebApp.LTMSServiceRef.InserInLotteryClaimEntryRequest();
            inValue.objClsLotteryClaimDetails = objClsLotteryClaimDetails;
            LTMSWebApp.LTMSServiceRef.InserInLotteryClaimEntryResponse retVal = ((LTMSWebApp.LTMSServiceRef.ILTMSService)(this)).InserInLotteryClaimEntry(inValue);
            TransactionNo = retVal.TransactionNo;
            return retVal.InserInLotteryClaimEntryResult;
        }
        
        public System.Threading.Tasks.Task<LTMSWebApp.LTMSServiceRef.InserInLotteryClaimEntryResponse> InserInLotteryClaimEntryAsync(LTMSWebApp.LTMSServiceRef.InserInLotteryClaimEntryRequest request) {
            return base.Channel.InserInLotteryClaimEntryAsync(request);
        }
        
        public System.Data.DataTable GetLotteryClaimEntryDtlByReqCode(string ReqCode) {
            return base.Channel.GetLotteryClaimEntryDtlByReqCode(ReqCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryClaimEntryDtlByReqCodeAsync(string ReqCode) {
            return base.Channel.GetLotteryClaimEntryDtlByReqCodeAsync(ReqCode);
        }
        
        public System.Data.DataTable GetLotteryClaimEntryDtlByStatus(LTMSClass.clsInputParameter objInputParameter, int InClaimType) {
            return base.Channel.GetLotteryClaimEntryDtlByStatus(objInputParameter, InClaimType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryClaimEntryDtlByStatusAsync(LTMSClass.clsInputParameter objInputParameter, int InClaimType) {
            return base.Channel.GetLotteryClaimEntryDtlByStatusAsync(objInputParameter, InClaimType);
        }
        
        public System.Data.DataSet GetLotteryClaimEntryDtlByReqId(long InDataUniqueId) {
            return base.Channel.GetLotteryClaimEntryDtlByReqId(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetLotteryClaimEntryDtlByReqIdAsync(long InDataUniqueId) {
            return base.Channel.GetLotteryClaimEntryDtlByReqIdAsync(InDataUniqueId);
        }
        
        public bool UpdateApprovalInLotteryClaimEntry(LTMSClass.ClsLotteryClaimApprovalDetails objClsLotteryClaimApprovalDetails) {
            return base.Channel.UpdateApprovalInLotteryClaimEntry(objClsLotteryClaimApprovalDetails);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateApprovalInLotteryClaimEntryAsync(LTMSClass.ClsLotteryClaimApprovalDetails objClsLotteryClaimApprovalDetails) {
            return base.Channel.UpdateApprovalInLotteryClaimEntryAsync(objClsLotteryClaimApprovalDetails);
        }
        
        public bool UpdateApprovalByStausInLotteryClaimEntry(LTMSClass.ClsRequisition objRequisition, string ReqId, int ClaimType) {
            return base.Channel.UpdateApprovalByStausInLotteryClaimEntry(objRequisition, ReqId, ClaimType);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateApprovalByStausInLotteryClaimEntryAsync(LTMSClass.ClsRequisition objRequisition, string ReqId, int ClaimType) {
            return base.Channel.UpdateApprovalByStausInLotteryClaimEntryAsync(objRequisition, ReqId, ClaimType);
        }
        
        public System.Data.DataTable GetLotteryClaimSendToGovDtlByStatus(LTMSClass.clsInputParameter objInputParameter, int InClaimType, int GovId) {
            return base.Channel.GetLotteryClaimSendToGovDtlByStatus(objInputParameter, InClaimType, GovId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryClaimSendToGovDtlByStatusAsync(LTMSClass.clsInputParameter objInputParameter, int InClaimType, int GovId) {
            return base.Channel.GetLotteryClaimSendToGovDtlByStatusAsync(objInputParameter, InClaimType, GovId);
        }
        
        public System.Data.DataTable GetClaimSendToGovApprovedDtl(LTMSClass.clsInputParameter objInputParameter) {
            return base.Channel.GetClaimSendToGovApprovedDtl(objInputParameter);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetClaimSendToGovApprovedDtlAsync(LTMSClass.clsInputParameter objInputParameter) {
            return base.Channel.GetClaimSendToGovApprovedDtlAsync(objInputParameter);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LTMSWebApp.LTMSServiceRef.UpdateLotteryClaimEntrySendToGovResponse LTMSWebApp.LTMSServiceRef.ILTMSService.UpdateLotteryClaimEntrySendToGov(LTMSWebApp.LTMSServiceRef.UpdateLotteryClaimEntrySendToGovRequest request) {
            return base.Channel.UpdateLotteryClaimEntrySendToGov(request);
        }
        
        public bool UpdateLotteryClaimEntrySendToGov(LTMSClass.ClsRequisition objRequisition, string ReqId, out string TransactionNo) {
            LTMSWebApp.LTMSServiceRef.UpdateLotteryClaimEntrySendToGovRequest inValue = new LTMSWebApp.LTMSServiceRef.UpdateLotteryClaimEntrySendToGovRequest();
            inValue.objRequisition = objRequisition;
            inValue.ReqId = ReqId;
            LTMSWebApp.LTMSServiceRef.UpdateLotteryClaimEntrySendToGovResponse retVal = ((LTMSWebApp.LTMSServiceRef.ILTMSService)(this)).UpdateLotteryClaimEntrySendToGov(inValue);
            TransactionNo = retVal.TransactionNo;
            return retVal.UpdateLotteryClaimEntrySendToGovResult;
        }
        
        public System.Threading.Tasks.Task<LTMSWebApp.LTMSServiceRef.UpdateLotteryClaimEntrySendToGovResponse> UpdateLotteryClaimEntrySendToGovAsync(LTMSWebApp.LTMSServiceRef.UpdateLotteryClaimEntrySendToGovRequest request) {
            return base.Channel.UpdateLotteryClaimEntrySendToGovAsync(request);
        }
        
        public System.Data.DataTable GetSendToGovAnnextureIIIByID(long InDataUniqueId) {
            return base.Channel.GetSendToGovAnnextureIIIByID(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSendToGovAnnextureIIIByIDAsync(long InDataUniqueId) {
            return base.Channel.GetSendToGovAnnextureIIIByIDAsync(InDataUniqueId);
        }
        
        public bool InsertInTicketInventory(LTMSClass.ClsTicketInventory objTicketInventory) {
            return base.Channel.InsertInTicketInventory(objTicketInventory);
        }
        
        public System.Threading.Tasks.Task<bool> InsertInTicketInventoryAsync(LTMSClass.ClsTicketInventory objTicketInventory) {
            return base.Channel.InsertInTicketInventoryAsync(objTicketInventory);
        }
        
        public bool UpdateInTicketInventory(LTMSClass.ClsTicketInventory objTicketInventory) {
            return base.Channel.UpdateInTicketInventory(objTicketInventory);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInTicketInventoryAsync(LTMSClass.ClsTicketInventory objTicketInventory) {
            return base.Channel.UpdateInTicketInventoryAsync(objTicketInventory);
        }
        
        public bool GenerateLotteryNumberDtlById(long InDataUniqueId, int TicketStatus) {
            return base.Channel.GenerateLotteryNumberDtlById(InDataUniqueId, TicketStatus);
        }
        
        public System.Threading.Tasks.Task<bool> GenerateLotteryNumberDtlByIdAsync(long InDataUniqueId, int TicketStatus) {
            return base.Channel.GenerateLotteryNumberDtlByIdAsync(InDataUniqueId, TicketStatus);
        }
        
        public bool InserInTicketInventoryClaimed(LTMSClass.ClsLottery objClsLottery, System.Data.DataTable IntblTicketNo) {
            return base.Channel.InserInTicketInventoryClaimed(objClsLottery, IntblTicketNo);
        }
        
        public System.Threading.Tasks.Task<bool> InserInTicketInventoryClaimedAsync(LTMSClass.ClsLottery objClsLottery, System.Data.DataTable IntblTicketNo) {
            return base.Channel.InserInTicketInventoryClaimedAsync(objClsLottery, IntblTicketNo);
        }
        
        public System.Data.DataTable GetVariableClaimPrizeById(long InDataUniqueId) {
            return base.Channel.GetVariableClaimPrizeById(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetVariableClaimPrizeByIdAsync(long InDataUniqueId) {
            return base.Channel.GetVariableClaimPrizeByIdAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable GetVariableClaimByClaimId(long InDataUniqueId) {
            return base.Channel.GetVariableClaimByClaimId(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetVariableClaimByClaimIdAsync(long InDataUniqueId) {
            return base.Channel.GetVariableClaimByClaimIdAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable GetVariableClaimVoucherDtlById(long InDataUniqueId) {
            return base.Channel.GetVariableClaimVoucherDtlById(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetVariableClaimVoucherDtlByIdAsync(long InDataUniqueId) {
            return base.Channel.GetVariableClaimVoucherDtlByIdAsync(InDataUniqueId);
        }
        
        public bool DeleteInVariableClaimByVoucherId(long InDataUniqueId) {
            return base.Channel.DeleteInVariableClaimByVoucherId(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteInVariableClaimByVoucherIdAsync(long InDataUniqueId) {
            return base.Channel.DeleteInVariableClaimByVoucherIdAsync(InDataUniqueId);
        }
        
        public bool UpdateApprovalInVariableClaim(LTMSClass.ClsRequisition objRequisition, string ReqId, System.Data.DataTable IntblTicketNo) {
            return base.Channel.UpdateApprovalInVariableClaim(objRequisition, ReqId, IntblTicketNo);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateApprovalInVariableClaimAsync(LTMSClass.ClsRequisition objRequisition, string ReqId, System.Data.DataTable IntblTicketNo) {
            return base.Channel.UpdateApprovalInVariableClaimAsync(objRequisition, ReqId, IntblTicketNo);
        }
        
        public bool InserInTicketInventoryUnSold(LTMSClass.ClsLottery objClsLottery, System.Data.DataTable IntblTicketNo, int SaveStatus) {
            return base.Channel.InserInTicketInventoryUnSold(objClsLottery, IntblTicketNo, SaveStatus);
        }
        
        public System.Threading.Tasks.Task<bool> InserInTicketInventoryUnSoldAsync(LTMSClass.ClsLottery objClsLottery, System.Data.DataTable IntblTicketNo, int SaveStatus) {
            return base.Channel.InserInTicketInventoryUnSoldAsync(objClsLottery, IntblTicketNo, SaveStatus);
        }
        
        public System.Data.DataTable GetLotteryUnsold(long InDataUniqueId) {
            return base.Channel.GetLotteryUnsold(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryUnsoldAsync(long InDataUniqueId) {
            return base.Channel.GetLotteryUnsoldAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable GetRequisitionTransactionDtlById(long InDataUniqueId) {
            return base.Channel.GetRequisitionTransactionDtlById(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitionTransactionDtlByIdAsync(long InDataUniqueId) {
            return base.Channel.GetRequisitionTransactionDtlByIdAsync(InDataUniqueId);
        }
        
        public bool UpdateInRequisitionChallan(LTMSClass.ClsChallan objChallan) {
            return base.Channel.UpdateInRequisitionChallan(objChallan);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInRequisitionChallanAsync(LTMSClass.ClsChallan objChallan) {
            return base.Channel.UpdateInRequisitionChallanAsync(objChallan);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LTMSWebApp.LTMSServiceRef.InserInRequisitionChallanResponse LTMSWebApp.LTMSServiceRef.ILTMSService.InserInRequisitionChallan(LTMSWebApp.LTMSServiceRef.InserInRequisitionChallanRequest request) {
            return base.Channel.InserInRequisitionChallan(request);
        }
        
        public bool InserInRequisitionChallan(LTMSClass.ClsChallan objChallan, out string TransactionNo) {
            LTMSWebApp.LTMSServiceRef.InserInRequisitionChallanRequest inValue = new LTMSWebApp.LTMSServiceRef.InserInRequisitionChallanRequest();
            inValue.objChallan = objChallan;
            LTMSWebApp.LTMSServiceRef.InserInRequisitionChallanResponse retVal = ((LTMSWebApp.LTMSServiceRef.ILTMSService)(this)).InserInRequisitionChallan(inValue);
            TransactionNo = retVal.TransactionNo;
            return retVal.InserInRequisitionChallanResult;
        }
        
        public System.Threading.Tasks.Task<LTMSWebApp.LTMSServiceRef.InserInRequisitionChallanResponse> InserInRequisitionChallanAsync(LTMSWebApp.LTMSServiceRef.InserInRequisitionChallanRequest request) {
            return base.Channel.InserInRequisitionChallanAsync(request);
        }
        
        public System.Data.DataTable GetRequisitionChallanDtlById(long InDataUniqueId) {
            return base.Channel.GetRequisitionChallanDtlById(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitionChallanDtlByIdAsync(long InDataUniqueId) {
            return base.Channel.GetRequisitionChallanDtlByIdAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable GetChallanDtlById(long InDataUniqueId) {
            return base.Channel.GetChallanDtlById(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetChallanDtlByIdAsync(long InDataUniqueId) {
            return base.Channel.GetChallanDtlByIdAsync(InDataUniqueId);
        }
        
        public bool DeleteInChallanById(long InDataUniqueId) {
            return base.Channel.DeleteInChallanById(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteInChallanByIdAsync(long InDataUniqueId) {
            return base.Channel.DeleteInChallanByIdAsync(InDataUniqueId);
        }
        
        public bool UpdateApprovalInRequisitionChallan(LTMSClass.ClsChallan objChallan, string ReqId) {
            return base.Channel.UpdateApprovalInRequisitionChallan(objChallan, ReqId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateApprovalInRequisitionChallanAsync(LTMSClass.ClsChallan objChallan, string ReqId) {
            return base.Channel.UpdateApprovalInRequisitionChallanAsync(objChallan, ReqId);
        }
        
        public System.Data.DataTable GetVariableIncentiveByReqId(long InDataUniqueId, string ClaimType) {
            return base.Channel.GetVariableIncentiveByReqId(InDataUniqueId, ClaimType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetVariableIncentiveByReqIdAsync(long InDataUniqueId, string ClaimType) {
            return base.Channel.GetVariableIncentiveByReqIdAsync(InDataUniqueId, ClaimType);
        }
        
        public System.Data.DataTable GetDealerListOfTransactionDtl() {
            return base.Channel.GetDealerListOfTransactionDtl();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDealerListOfTransactionDtlAsync() {
            return base.Channel.GetDealerListOfTransactionDtlAsync();
        }
        
        public System.Data.DataSet GetDealerTransactionDtlByReqId(long InDataUniqueId) {
            return base.Channel.GetDealerTransactionDtlByReqId(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDealerTransactionDtlByReqIdAsync(long InDataUniqueId) {
            return base.Channel.GetDealerTransactionDtlByReqIdAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable GetProfitLossDtlByReqId(long InDataUniqueId) {
            return base.Channel.GetProfitLossDtlByReqId(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetProfitLossDtlByReqIdAsync(long InDataUniqueId) {
            return base.Channel.GetProfitLossDtlByReqIdAsync(InDataUniqueId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LTMSWebApp.LTMSServiceRef.InsertInSeriesGenerationResponse LTMSWebApp.LTMSServiceRef.ILTMSService.InsertInSeriesGeneration(LTMSWebApp.LTMSServiceRef.InsertInSeriesGenerationRequest request) {
            return base.Channel.InsertInSeriesGeneration(request);
        }
        
        public bool InsertInSeriesGeneration(LTMSClass.ClsSeriesGeneration obj, out string InsertedID) {
            LTMSWebApp.LTMSServiceRef.InsertInSeriesGenerationRequest inValue = new LTMSWebApp.LTMSServiceRef.InsertInSeriesGenerationRequest();
            inValue.obj = obj;
            LTMSWebApp.LTMSServiceRef.InsertInSeriesGenerationResponse retVal = ((LTMSWebApp.LTMSServiceRef.ILTMSService)(this)).InsertInSeriesGeneration(inValue);
            InsertedID = retVal.InsertedID;
            return retVal.InsertInSeriesGenerationResult;
        }
        
        public System.Threading.Tasks.Task<LTMSWebApp.LTMSServiceRef.InsertInSeriesGenerationResponse> InsertInSeriesGenerationAsync(LTMSWebApp.LTMSServiceRef.InsertInSeriesGenerationRequest request) {
            return base.Channel.InsertInSeriesGenerationAsync(request);
        }
        
        public bool UpdateInSeriesGeneration(LTMSClass.ClsSeriesGeneration obj) {
            return base.Channel.UpdateInSeriesGeneration(obj);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInSeriesGenerationAsync(LTMSClass.ClsSeriesGeneration obj) {
            return base.Channel.UpdateInSeriesGenerationAsync(obj);
        }
        
        public System.Data.DataTable GetSeriesGenerationAll() {
            return base.Channel.GetSeriesGenerationAll();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSeriesGenerationAllAsync() {
            return base.Channel.GetSeriesGenerationAllAsync();
        }
        
        public System.Data.DataTable GetSeriesGenerationById(long ID) {
            return base.Channel.GetSeriesGenerationById(ID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSeriesGenerationByIdAsync(long ID) {
            return base.Channel.GetSeriesGenerationByIdAsync(ID);
        }
        
        public System.Data.DataTable GetSeriesGenerationByReqId(int ReqId) {
            return base.Channel.GetSeriesGenerationByReqId(ReqId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSeriesGenerationByReqIdAsync(int ReqId) {
            return base.Channel.GetSeriesGenerationByReqIdAsync(ReqId);
        }
        
        public System.Data.DataTable GetSeriesGenerationByReqIdSpecific(int ReqId, long Id) {
            return base.Channel.GetSeriesGenerationByReqIdSpecific(ReqId, Id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSeriesGenerationByReqIdSpecificAsync(int ReqId, long Id) {
            return base.Channel.GetSeriesGenerationByReqIdSpecificAsync(ReqId, Id);
        }
        
        public System.Data.DataTable GetSeriesGenerationListByReqId(int ReqId) {
            return base.Channel.GetSeriesGenerationListByReqId(ReqId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSeriesGenerationListByReqIdAsync(int ReqId) {
            return base.Channel.GetSeriesGenerationListByReqIdAsync(ReqId);
        }
        
        public System.Data.DataTable GetSeriesGenerationByReqIdAndSr1End(int ReqId, long Sr1End) {
            return base.Channel.GetSeriesGenerationByReqIdAndSr1End(ReqId, Sr1End);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSeriesGenerationByReqIdAndSr1EndAsync(int ReqId, long Sr1End) {
            return base.Channel.GetSeriesGenerationByReqIdAndSr1EndAsync(ReqId, Sr1End);
        }
        
        public bool DeleteInSeriesGeneration(long ID) {
            return base.Channel.DeleteInSeriesGeneration(ID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteInSeriesGenerationAsync(long ID) {
            return base.Channel.DeleteInSeriesGenerationAsync(ID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LTMSWebApp.LTMSServiceRef.InsertInZipProgressResponse LTMSWebApp.LTMSServiceRef.ILTMSService.InsertInZipProgress(LTMSWebApp.LTMSServiceRef.InsertInZipProgressRequest request) {
            return base.Channel.InsertInZipProgress(request);
        }
        
        public bool InsertInZipProgress(LTMSClass.ZipProgressMaster objZipProgress, out string ZipID) {
            LTMSWebApp.LTMSServiceRef.InsertInZipProgressRequest inValue = new LTMSWebApp.LTMSServiceRef.InsertInZipProgressRequest();
            inValue.objZipProgress = objZipProgress;
            LTMSWebApp.LTMSServiceRef.InsertInZipProgressResponse retVal = ((LTMSWebApp.LTMSServiceRef.ILTMSService)(this)).InsertInZipProgress(inValue);
            ZipID = retVal.ZipID;
            return retVal.InsertInZipProgressResult;
        }
        
        public System.Threading.Tasks.Task<LTMSWebApp.LTMSServiceRef.InsertInZipProgressResponse> InsertInZipProgressAsync(LTMSWebApp.LTMSServiceRef.InsertInZipProgressRequest request) {
            return base.Channel.InsertInZipProgressAsync(request);
        }
        
        public bool UpdateInZipProgress(LTMSClass.ZipProgressMaster objZipProgress) {
            return base.Channel.UpdateInZipProgress(objZipProgress);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInZipProgressAsync(LTMSClass.ZipProgressMaster objZipProgress) {
            return base.Channel.UpdateInZipProgressAsync(objZipProgress);
        }
        
        public bool DeleteInZipProgress(long ID) {
            return base.Channel.DeleteInZipProgress(ID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteInZipProgressAsync(long ID) {
            return base.Channel.DeleteInZipProgressAsync(ID);
        }
        
        public System.Data.DataTable GetZipProgressById(long ID) {
            return base.Channel.GetZipProgressById(ID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetZipProgressByIdAsync(long ID) {
            return base.Channel.GetZipProgressByIdAsync(ID);
        }
        
        public bool InsertInLottery(LTMSClass.ClsLottery objLottery) {
            return base.Channel.InsertInLottery(objLottery);
        }
        
        public System.Threading.Tasks.Task<bool> InsertInLotteryAsync(LTMSClass.ClsLottery objLottery) {
            return base.Channel.InsertInLotteryAsync(objLottery);
        }
        
        public bool UpdateInLottery(LTMSClass.ClsLottery objLottery) {
            return base.Channel.UpdateInLottery(objLottery);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInLotteryAsync(LTMSClass.ClsLottery objLottery) {
            return base.Channel.UpdateInLotteryAsync(objLottery);
        }
        
        public System.Data.DataTable GetLotteryDtl() {
            return base.Channel.GetLotteryDtl();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryDtlAsync() {
            return base.Channel.GetLotteryDtlAsync();
        }
        
        public System.Data.DataTable GetLotteryDtlById(long InDataUniqueId) {
            return base.Channel.GetLotteryDtlById(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryDtlByIdAsync(long InDataUniqueId) {
            return base.Channel.GetLotteryDtlByIdAsync(InDataUniqueId);
        }
        
        public bool DeleteInLottery(long InDataUniqueId) {
            return base.Channel.DeleteInLottery(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteInLotteryAsync(long InDataUniqueId) {
            return base.Channel.DeleteInLotteryAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable GetLotteryDtlByLotteryTypeId(long InDataUniqueId) {
            return base.Channel.GetLotteryDtlByLotteryTypeId(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryDtlByLotteryTypeIdAsync(long InDataUniqueId) {
            return base.Channel.GetLotteryDtlByLotteryTypeIdAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable GetLotteryDtlByName(string LotteryName) {
            return base.Channel.GetLotteryDtlByName(LotteryName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryDtlByNameAsync(string LotteryName) {
            return base.Channel.GetLotteryDtlByNameAsync(LotteryName);
        }
        
        public bool InsertInLotteryType(LTMSClass.ClsLotteryType objLotteryType) {
            return base.Channel.InsertInLotteryType(objLotteryType);
        }
        
        public System.Threading.Tasks.Task<bool> InsertInLotteryTypeAsync(LTMSClass.ClsLotteryType objLotteryType) {
            return base.Channel.InsertInLotteryTypeAsync(objLotteryType);
        }
        
        public bool UpdateInLotteryType(LTMSClass.ClsLotteryType objLotteryType) {
            return base.Channel.UpdateInLotteryType(objLotteryType);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInLotteryTypeAsync(LTMSClass.ClsLotteryType objLotteryType) {
            return base.Channel.UpdateInLotteryTypeAsync(objLotteryType);
        }
        
        public System.Data.DataTable GetLotteryTypeDtl() {
            return base.Channel.GetLotteryTypeDtl();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryTypeDtlAsync() {
            return base.Channel.GetLotteryTypeDtlAsync();
        }
        
        public System.Data.DataTable GetLotteryTypeDtlById(long InDataUniqueId) {
            return base.Channel.GetLotteryTypeDtlById(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryTypeDtlByIdAsync(long InDataUniqueId) {
            return base.Channel.GetLotteryTypeDtlByIdAsync(InDataUniqueId);
        }
        
        public bool DeleteInLotteryType(long InDataUniqueId) {
            return base.Channel.DeleteInLotteryType(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteInLotteryTypeAsync(long InDataUniqueId) {
            return base.Channel.DeleteInLotteryTypeAsync(InDataUniqueId);
        }
        
        public bool InsertInGovermentOrder(LTMSClass.ClsGovermentOrder objGovermentOrder) {
            return base.Channel.InsertInGovermentOrder(objGovermentOrder);
        }
        
        public System.Threading.Tasks.Task<bool> InsertInGovermentOrderAsync(LTMSClass.ClsGovermentOrder objGovermentOrder) {
            return base.Channel.InsertInGovermentOrderAsync(objGovermentOrder);
        }
        
        public bool UpdateInGovermentOrder(LTMSClass.ClsGovermentOrder objGovermentOrder) {
            return base.Channel.UpdateInGovermentOrder(objGovermentOrder);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInGovermentOrderAsync(LTMSClass.ClsGovermentOrder objGovermentOrder) {
            return base.Channel.UpdateInGovermentOrderAsync(objGovermentOrder);
        }
        
        public System.Data.DataTable GetGovermentOrderDtl() {
            return base.Channel.GetGovermentOrderDtl();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetGovermentOrderDtlAsync() {
            return base.Channel.GetGovermentOrderDtlAsync();
        }
        
        public System.Data.DataTable GetGovermentOrderDtlById(long InDataUniqueId) {
            return base.Channel.GetGovermentOrderDtlById(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetGovermentOrderDtlByIdAsync(long InDataUniqueId) {
            return base.Channel.GetGovermentOrderDtlByIdAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable GetGovOrderDtlByLotteryId(long InDataUniqueId) {
            return base.Channel.GetGovOrderDtlByLotteryId(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetGovOrderDtlByLotteryIdAsync(long InDataUniqueId) {
            return base.Channel.GetGovOrderDtlByLotteryIdAsync(InDataUniqueId);
        }
        
        public bool DeleteInGovermentOrder(long InDataUniqueId) {
            return base.Channel.DeleteInGovermentOrder(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteInGovermentOrderAsync(long InDataUniqueId) {
            return base.Channel.DeleteInGovermentOrderAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable GetGovermentOrderDtlbyStatus(int InStatus) {
            return base.Channel.GetGovermentOrderDtlbyStatus(InStatus);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetGovermentOrderDtlbyStatusAsync(int InStatus) {
            return base.Channel.GetGovermentOrderDtlbyStatusAsync(InStatus);
        }
        
        public System.Data.DataTable GetLotteryByApprovedGovOrder(long InDataUniqueId) {
            return base.Channel.GetLotteryByApprovedGovOrder(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryByApprovedGovOrderAsync(long InDataUniqueId) {
            return base.Channel.GetLotteryByApprovedGovOrderAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable GetDepositToDtl() {
            return base.Channel.GetDepositToDtl();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDepositToDtlAsync() {
            return base.Channel.GetDepositToDtlAsync();
        }
        
        public bool InsertInUserRole(LTMSClass.ClsUserRole objUserRole, System.Data.DataTable dtUserAccessMenuDtl) {
            return base.Channel.InsertInUserRole(objUserRole, dtUserAccessMenuDtl);
        }
        
        public System.Threading.Tasks.Task<bool> InsertInUserRoleAsync(LTMSClass.ClsUserRole objUserRole, System.Data.DataTable dtUserAccessMenuDtl) {
            return base.Channel.InsertInUserRoleAsync(objUserRole, dtUserAccessMenuDtl);
        }
        
        public bool UpdateInUserRole(LTMSClass.ClsUserRole objUserRole, System.Data.DataTable dtUserAccessMenuDtl) {
            return base.Channel.UpdateInUserRole(objUserRole, dtUserAccessMenuDtl);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInUserRoleAsync(LTMSClass.ClsUserRole objUserRole, System.Data.DataTable dtUserAccessMenuDtl) {
            return base.Channel.UpdateInUserRoleAsync(objUserRole, dtUserAccessMenuDtl);
        }
        
        public System.Data.DataTable GetUserRoleDtl() {
            return base.Channel.GetUserRoleDtl();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetUserRoleDtlAsync() {
            return base.Channel.GetUserRoleDtlAsync();
        }
        
        public System.Data.DataTable GetUserRoleDtlById(long InDataUniqueId) {
            return base.Channel.GetUserRoleDtlById(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetUserRoleDtlByIdAsync(long InDataUniqueId) {
            return base.Channel.GetUserRoleDtlByIdAsync(InDataUniqueId);
        }
        
        public bool DeleteInUserRole(long InDataUniqueId) {
            return base.Channel.DeleteInUserRole(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteInUserRoleAsync(long InDataUniqueId) {
            return base.Channel.DeleteInUserRoleAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable GetGetMenuListForUserRole(long InUserRoleID) {
            return base.Channel.GetGetMenuListForUserRole(InUserRoleID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetGetMenuListForUserRoleAsync(long InUserRoleID) {
            return base.Channel.GetGetMenuListForUserRoleAsync(InUserRoleID);
        }
        
        public System.Data.DataTable GetNavMenuListForUserRoleId(long InUserRoleID) {
            return base.Channel.GetNavMenuListForUserRoleId(InUserRoleID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetNavMenuListForUserRoleIdAsync(long InUserRoleID) {
            return base.Channel.GetNavMenuListForUserRoleIdAsync(InUserRoleID);
        }
        
        public bool InsertInPrize(LTMSClass.ClsPrize objPrize, System.Data.DataTable dtPrizeDtl) {
            return base.Channel.InsertInPrize(objPrize, dtPrizeDtl);
        }
        
        public System.Threading.Tasks.Task<bool> InsertInPrizeAsync(LTMSClass.ClsPrize objPrize, System.Data.DataTable dtPrizeDtl) {
            return base.Channel.InsertInPrizeAsync(objPrize, dtPrizeDtl);
        }
        
        public bool UpdateInPrize(LTMSClass.ClsPrize objPrize, System.Data.DataTable dtPrizeDtl) {
            return base.Channel.UpdateInPrize(objPrize, dtPrizeDtl);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInPrizeAsync(LTMSClass.ClsPrize objPrize, System.Data.DataTable dtPrizeDtl) {
            return base.Channel.UpdateInPrizeAsync(objPrize, dtPrizeDtl);
        }
        
        public System.Data.DataTable GetPrizeDtl() {
            return base.Channel.GetPrizeDtl();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetPrizeDtlAsync() {
            return base.Channel.GetPrizeDtlAsync();
        }
        
        public System.Data.DataSet GetPrizeDtlById(long InDataUniqueId) {
            return base.Channel.GetPrizeDtlById(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPrizeDtlByIdAsync(long InDataUniqueId) {
            return base.Channel.GetPrizeDtlByIdAsync(InDataUniqueId);
        }
        
        public bool DeleteInPrize(long InDataUniqueId) {
            return base.Channel.DeleteInPrize(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteInPrizeAsync(long InDataUniqueId) {
            return base.Channel.DeleteInPrizeAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable GetWinnePrizeWinningSlNoDtlById(long InDataUniqueId, short RowNo) {
            return base.Channel.GetWinnePrizeWinningSlNoDtlById(InDataUniqueId, RowNo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetWinnePrizeWinningSlNoDtlByIdAsync(long InDataUniqueId, short RowNo) {
            return base.Channel.GetWinnePrizeWinningSlNoDtlByIdAsync(InDataUniqueId, RowNo);
        }
        
        public System.Data.DataSet GetLotteryWiningSerialNoDtlByLotteryNo(long InDataUniqueId, string LotteryNo) {
            return base.Channel.GetLotteryWiningSerialNoDtlByLotteryNo(InDataUniqueId, LotteryNo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetLotteryWiningSerialNoDtlByLotteryNoAsync(long InDataUniqueId, string LotteryNo) {
            return base.Channel.GetLotteryWiningSerialNoDtlByLotteryNoAsync(InDataUniqueId, LotteryNo);
        }
        
        public bool UpdateApprovalInPrize(LTMSClass.ClsPrize objClsPrize) {
            return base.Channel.UpdateApprovalInPrize(objClsPrize);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateApprovalInPrizeAsync(LTMSClass.ClsPrize objClsPrize) {
            return base.Channel.UpdateApprovalInPrizeAsync(objClsPrize);
        }
        
        public bool UpdateInPrizeWinner(LTMSClass.ClsPrizeWinner objPrizeWinner, System.Data.DataTable dtPrizeWinnerDtl) {
            return base.Channel.UpdateInPrizeWinner(objPrizeWinner, dtPrizeWinnerDtl);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInPrizeWinnerAsync(LTMSClass.ClsPrizeWinner objPrizeWinner, System.Data.DataTable dtPrizeWinnerDtl) {
            return base.Channel.UpdateInPrizeWinnerAsync(objPrizeWinner, dtPrizeWinnerDtl);
        }
        
        public System.Data.DataTable GetWinneListDtlById(long InDataUniqueId) {
            return base.Channel.GetWinneListDtlById(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetWinneListDtlByIdAsync(long InDataUniqueId) {
            return base.Channel.GetWinneListDtlByIdAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable GetWinneEntryDtlByRequisitionId(long InDataUniqueId) {
            return base.Channel.GetWinneEntryDtlByRequisitionId(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetWinneEntryDtlByRequisitionIdAsync(long InDataUniqueId) {
            return base.Channel.GetWinneEntryDtlByRequisitionIdAsync(InDataUniqueId);
        }
        
        public bool UpdateApprovalInReqWinnerPrize(LTMSClass.ClsRequisition objRequisition, string ReqId) {
            return base.Channel.UpdateApprovalInReqWinnerPrize(objRequisition, ReqId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateApprovalInReqWinnerPrizeAsync(LTMSClass.ClsRequisition objRequisition, string ReqId) {
            return base.Channel.UpdateApprovalInReqWinnerPrizeAsync(objRequisition, ReqId);
        }
        
        public System.Data.DataSet GetWinnigSlNoDtlByRequisitionId(long InDataUniqueId) {
            return base.Channel.GetWinnigSlNoDtlByRequisitionId(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetWinnigSlNoDtlByRequisitionIdAsync(long InDataUniqueId) {
            return base.Channel.GetWinnigSlNoDtlByRequisitionIdAsync(InDataUniqueId);
        }
        
        public bool InsertInUser(LTMSClass.ClsUser objUser) {
            return base.Channel.InsertInUser(objUser);
        }
        
        public System.Threading.Tasks.Task<bool> InsertInUserAsync(LTMSClass.ClsUser objUser) {
            return base.Channel.InsertInUserAsync(objUser);
        }
        
        public bool UpdateInUser(LTMSClass.ClsUser objUser) {
            return base.Channel.UpdateInUser(objUser);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInUserAsync(LTMSClass.ClsUser objUser) {
            return base.Channel.UpdateInUserAsync(objUser);
        }
        
        public System.Data.DataTable GetUserDtl() {
            return base.Channel.GetUserDtl();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetUserDtlAsync() {
            return base.Channel.GetUserDtlAsync();
        }
        
        public System.Data.DataTable GetUserDtlById(long InDataUniqueId) {
            return base.Channel.GetUserDtlById(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetUserDtlByIdAsync(long InDataUniqueId) {
            return base.Channel.GetUserDtlByIdAsync(InDataUniqueId);
        }
        
        public bool DeleteInUser(long InDataUniqueId) {
            return base.Channel.DeleteInUser(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteInUserAsync(long InDataUniqueId) {
            return base.Channel.DeleteInUserAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable GetIsValidUser(string UserId, string UserPassword) {
            return base.Channel.GetIsValidUser(UserId, UserPassword);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetIsValidUserAsync(string UserId, string UserPassword) {
            return base.Channel.GetIsValidUserAsync(UserId, UserPassword);
        }
        
        public bool UpdateUserPassword(LTMSClass.ClsUser objUser) {
            return base.Channel.UpdateUserPassword(objUser);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserPasswordAsync(LTMSClass.ClsUser objUser) {
            return base.Channel.UpdateUserPasswordAsync(objUser);
        }
        
        public System.Data.DataTable GetUserDtlByEmailOrMobile(string EmailId, string MobileNo) {
            return base.Channel.GetUserDtlByEmailOrMobile(EmailId, MobileNo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetUserDtlByEmailOrMobileAsync(string EmailId, string MobileNo) {
            return base.Channel.GetUserDtlByEmailOrMobileAsync(EmailId, MobileNo);
        }
        
        public System.Data.DataTable GetIsMenuAccessAvailable(long InUserRoleId, string InMenuCode) {
            return base.Channel.GetIsMenuAccessAvailable(InUserRoleId, InMenuCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetIsMenuAccessAvailableAsync(long InUserRoleId, string InMenuCode) {
            return base.Channel.GetIsMenuAccessAvailableAsync(InUserRoleId, InMenuCode);
        }
        
        public System.Data.DataTable GetUserDtlByUserId(string InUserId) {
            return base.Channel.GetUserDtlByUserId(InUserId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetUserDtlByUserIdAsync(string InUserId) {
            return base.Channel.GetUserDtlByUserIdAsync(InUserId);
        }
        
        public bool InsertInDealerDeposit(LTMSClass.ClsDealerDeposit objDealerDeposit) {
            return base.Channel.InsertInDealerDeposit(objDealerDeposit);
        }
        
        public System.Threading.Tasks.Task<bool> InsertInDealerDepositAsync(LTMSClass.ClsDealerDeposit objDealerDeposit) {
            return base.Channel.InsertInDealerDepositAsync(objDealerDeposit);
        }
        
        public bool UpdateInDealerDeposit(LTMSClass.ClsDealerDeposit objDealerDeposit) {
            return base.Channel.UpdateInDealerDeposit(objDealerDeposit);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInDealerDepositAsync(LTMSClass.ClsDealerDeposit objDealerDeposit) {
            return base.Channel.UpdateInDealerDepositAsync(objDealerDeposit);
        }
        
        public System.Data.DataTable GetDealerDepositViewDtl(LTMSClass.clsInputParameter objInputParameter) {
            return base.Channel.GetDealerDepositViewDtl(objInputParameter);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDealerDepositViewDtlAsync(LTMSClass.clsInputParameter objInputParameter) {
            return base.Channel.GetDealerDepositViewDtlAsync(objInputParameter);
        }
        
        public System.Data.DataTable GetDealerDepositDtlById(long InDataUniqueId) {
            return base.Channel.GetDealerDepositDtlById(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDealerDepositDtlByIdAsync(long InDataUniqueId) {
            return base.Channel.GetDealerDepositDtlByIdAsync(InDataUniqueId);
        }
        
        public bool DeleteInDealerDeposit(long InDataUniqueId) {
            return base.Channel.DeleteInDealerDeposit(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteInDealerDepositAsync(long InDataUniqueId) {
            return base.Channel.DeleteInDealerDepositAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable SpGetDealerDepositReconDtlByStatus(string InReconStatus) {
            return base.Channel.SpGetDealerDepositReconDtlByStatus(InReconStatus);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> SpGetDealerDepositReconDtlByStatusAsync(string InReconStatus) {
            return base.Channel.SpGetDealerDepositReconDtlByStatusAsync(InReconStatus);
        }
        
        public bool UpdateReconInDealerDeposit(LTMSClass.ClsDealerDeposit objDealerDeposit) {
            return base.Channel.UpdateReconInDealerDeposit(objDealerDeposit);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateReconInDealerDepositAsync(LTMSClass.ClsDealerDeposit objDealerDeposit) {
            return base.Channel.UpdateReconInDealerDepositAsync(objDealerDeposit);
        }
        
        public System.Data.DataTable GetDealerDepositViewForApprovalDtl(LTMSClass.clsInputParameter objInputParameter, int DepositToId) {
            return base.Channel.GetDealerDepositViewForApprovalDtl(objInputParameter, DepositToId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDealerDepositViewForApprovalDtlAsync(LTMSClass.clsInputParameter objInputParameter, int DepositToId) {
            return base.Channel.GetDealerDepositViewForApprovalDtlAsync(objInputParameter, DepositToId);
        }
        
        public bool UpdateApprovalInDealerDeposit(LTMSClass.ClsDealerDeposit objDealerDeposit, string ReqId) {
            return base.Channel.UpdateApprovalInDealerDeposit(objDealerDeposit, ReqId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateApprovalInDealerDepositAsync(LTMSClass.ClsDealerDeposit objDealerDeposit, string ReqId) {
            return base.Channel.UpdateApprovalInDealerDepositAsync(objDealerDeposit, ReqId);
        }
        
        public bool UpdateApprovalInReqDealerDeposit(LTMSClass.ClsRequisition objRequisition, string ReqId) {
            return base.Channel.UpdateApprovalInReqDealerDeposit(objRequisition, ReqId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateApprovalInReqDealerDepositAsync(LTMSClass.ClsRequisition objRequisition, string ReqId) {
            return base.Channel.UpdateApprovalInReqDealerDepositAsync(objRequisition, ReqId);
        }
        
        public System.Data.DataSet GetDealerDepositInHandDtlById(long InDataUniqueId) {
            return base.Channel.GetDealerDepositInHandDtlById(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDealerDepositInHandDtlByIdAsync(long InDataUniqueId) {
            return base.Channel.GetDealerDepositInHandDtlByIdAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable GetDealerDepositDtlByReqId(long InRequsitionId, short status) {
            return base.Channel.GetDealerDepositDtlByReqId(InRequsitionId, status);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDealerDepositDtlByReqIdAsync(long InRequsitionId, short status) {
            return base.Channel.GetDealerDepositDtlByReqIdAsync(InRequsitionId, status);
        }
        
        public System.Data.DataTable GetDepositMethodDetails() {
            return base.Channel.GetDepositMethodDetails();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDepositMethodDetailsAsync() {
            return base.Channel.GetDepositMethodDetailsAsync();
        }
        
        public System.Data.DataTable GetEmailToDtlByType(string EmailType) {
            return base.Channel.GetEmailToDtlByType(EmailType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetEmailToDtlByTypeAsync(string EmailType) {
            return base.Channel.GetEmailToDtlByTypeAsync(EmailType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LTMSWebApp.LTMSServiceRef.InsertInRequisitionResponse LTMSWebApp.LTMSServiceRef.ILTMSService.InsertInRequisition(LTMSWebApp.LTMSServiceRef.InsertInRequisitionRequest request) {
            return base.Channel.InsertInRequisition(request);
        }
        
        public bool InsertInRequisition(LTMSClass.ClsRequisition objRequisition, out string TransactionNo) {
            LTMSWebApp.LTMSServiceRef.InsertInRequisitionRequest inValue = new LTMSWebApp.LTMSServiceRef.InsertInRequisitionRequest();
            inValue.objRequisition = objRequisition;
            LTMSWebApp.LTMSServiceRef.InsertInRequisitionResponse retVal = ((LTMSWebApp.LTMSServiceRef.ILTMSService)(this)).InsertInRequisition(inValue);
            TransactionNo = retVal.TransactionNo;
            return retVal.InsertInRequisitionResult;
        }
        
        public System.Threading.Tasks.Task<LTMSWebApp.LTMSServiceRef.InsertInRequisitionResponse> InsertInRequisitionAsync(LTMSWebApp.LTMSServiceRef.InsertInRequisitionRequest request) {
            return base.Channel.InsertInRequisitionAsync(request);
        }
        
        public bool UpdateInRequisition(LTMSClass.ClsRequisition objRequisition) {
            return base.Channel.UpdateInRequisition(objRequisition);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInRequisitionAsync(LTMSClass.ClsRequisition objRequisition) {
            return base.Channel.UpdateInRequisitionAsync(objRequisition);
        }
        
        public bool UpdateCloseTransactionInRequisition(LTMSClass.ClsRequisition objRequisition) {
            return base.Channel.UpdateCloseTransactionInRequisition(objRequisition);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCloseTransactionInRequisitionAsync(LTMSClass.ClsRequisition objRequisition) {
            return base.Channel.UpdateCloseTransactionInRequisitionAsync(objRequisition);
        }
        
        public bool UpdateSendForAdjustment(LTMSClass.ClsRequisition objRequisition, string ReqId) {
            return base.Channel.UpdateSendForAdjustment(objRequisition, ReqId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSendForAdjustmentAsync(LTMSClass.ClsRequisition objRequisition, string ReqId) {
            return base.Channel.UpdateSendForAdjustmentAsync(objRequisition, ReqId);
        }
        
        public System.Data.DataTable GetSentAdjustmentDtlByTranNo(int DataUniqueId, int TransactionNo) {
            return base.Channel.GetSentAdjustmentDtlByTranNo(DataUniqueId, TransactionNo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSentAdjustmentDtlByTranNoAsync(int DataUniqueId, int TransactionNo) {
            return base.Channel.GetSentAdjustmentDtlByTranNoAsync(DataUniqueId, TransactionNo);
        }
        
        public System.Data.DataTable GetAdjustmentDtlByRequisitionId(int DataUniqueId) {
            return base.Channel.GetAdjustmentDtlByRequisitionId(DataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAdjustmentDtlByRequisitionIdAsync(int DataUniqueId) {
            return base.Channel.GetAdjustmentDtlByRequisitionIdAsync(DataUniqueId);
        }
        
        public System.Data.DataTable GetRequisitionDtl(LTMSClass.clsInputParameter objInputParameter) {
            return base.Channel.GetRequisitionDtl(objInputParameter);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitionDtlAsync(LTMSClass.clsInputParameter objInputParameter) {
            return base.Channel.GetRequisitionDtlAsync(objInputParameter);
        }
        
        public System.Data.DataTable GetRequisitionDtlById(long InDataUniqueId) {
            return base.Channel.GetRequisitionDtlById(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitionDtlByIdAsync(long InDataUniqueId) {
            return base.Channel.GetRequisitionDtlByIdAsync(InDataUniqueId);
        }
        
        public bool DeleteInRequisition(long InDataUniqueId) {
            return base.Channel.DeleteInRequisition(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteInRequisitionAsync(long InDataUniqueId) {
            return base.Channel.DeleteInRequisitionAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable GetRequisitionDtlByStatus(LTMSClass.clsInputParameter objInputParameter) {
            return base.Channel.GetRequisitionDtlByStatus(objInputParameter);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitionDtlByStatusAsync(LTMSClass.clsInputParameter objInputParameter) {
            return base.Channel.GetRequisitionDtlByStatusAsync(objInputParameter);
        }
        
        public System.Data.DataTable GetRequisitiondataForDDL(int SaveStatus, int Opmode) {
            return base.Channel.GetRequisitiondataForDDL(SaveStatus, Opmode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitiondataForDDLAsync(int SaveStatus, int Opmode) {
            return base.Channel.GetRequisitiondataForDDLAsync(SaveStatus, Opmode);
        }
        
        public System.Data.DataTable GetBankGuranteeLedger(LTMSClass.clsInputParameter objInputParameter) {
            return base.Channel.GetBankGuranteeLedger(objInputParameter);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetBankGuranteeLedgerAsync(LTMSClass.clsInputParameter objInputParameter) {
            return base.Channel.GetBankGuranteeLedgerAsync(objInputParameter);
        }
        
        public bool UpdateApprovalInRequisition(LTMSClass.ClsRequisition objRequisition, string ReqId) {
            return base.Channel.UpdateApprovalInRequisition(objRequisition, ReqId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateApprovalInRequisitionAsync(LTMSClass.ClsRequisition objRequisition, string ReqId) {
            return base.Channel.UpdateApprovalInRequisitionAsync(objRequisition, ReqId);
        }
        
        public bool UpdateApprovalInRequisitionUnSoldTicket(LTMSClass.ClsRequisition objRequisition, string ReqId) {
            return base.Channel.UpdateApprovalInRequisitionUnSoldTicket(objRequisition, ReqId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateApprovalInRequisitionUnSoldTicketAsync(LTMSClass.ClsRequisition objRequisition, string ReqId) {
            return base.Channel.UpdateApprovalInRequisitionUnSoldTicketAsync(objRequisition, ReqId);
        }
        
        public bool UpdateApprovalInRequisitionUnClaimTicket(LTMSClass.ClsRequisition objRequisition, string ReqId) {
            return base.Channel.UpdateApprovalInRequisitionUnClaimTicket(objRequisition, ReqId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateApprovalInRequisitionUnClaimTicketAsync(LTMSClass.ClsRequisition objRequisition, string ReqId) {
            return base.Channel.UpdateApprovalInRequisitionUnClaimTicketAsync(objRequisition, ReqId);
        }
        
        public System.Data.DataTable GetRequisitionDtlByStatusForDealerReq(int InStatus) {
            return base.Channel.GetRequisitionDtlByStatusForDealerReq(InStatus);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetRequisitionDtlByStatusForDealerReqAsync(int InStatus) {
            return base.Channel.GetRequisitionDtlByStatusForDealerReqAsync(InStatus);
        }
        
        public System.Data.DataTable GetDirectorRequisitionDtlByDealerReqId(long DataUniqueId) {
            return base.Channel.GetDirectorRequisitionDtlByDealerReqId(DataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDirectorRequisitionDtlByDealerReqIdAsync(long DataUniqueId) {
            return base.Channel.GetDirectorRequisitionDtlByDealerReqIdAsync(DataUniqueId);
        }
        
        public System.Data.DataTable GetLastDrawDateAndNoDtlByLotteryId(long InDataUniqueId) {
            return base.Channel.GetLastDrawDateAndNoDtlByLotteryId(InDataUniqueId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLastDrawDateAndNoDtlByLotteryIdAsync(long InDataUniqueId) {
            return base.Channel.GetLastDrawDateAndNoDtlByLotteryIdAsync(InDataUniqueId);
        }
        
        public System.Data.DataTable GetLotteryDtlFromRequisitionDtl(long InLotteryId, System.Nullable<int> InDrawNo, System.Nullable<System.DateTime> InDrawDate) {
            return base.Channel.GetLotteryDtlFromRequisitionDtl(InLotteryId, InDrawNo, InDrawDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLotteryDtlFromRequisitionDtlAsync(long InLotteryId, System.Nullable<int> InDrawNo, System.Nullable<System.DateTime> InDrawDate) {
            return base.Channel.GetLotteryDtlFromRequisitionDtlAsync(InLotteryId, InDrawNo, InDrawDate);
        }
        
        public System.Data.DataSet GetLotteryDtlInClaimAndUnSold(long InDataUniqueId, string InLotteryNo, int FnNo, string Alphabet, long TnNo) {
            return base.Channel.GetLotteryDtlInClaimAndUnSold(InDataUniqueId, InLotteryNo, FnNo, Alphabet, TnNo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetLotteryDtlInClaimAndUnSoldAsync(long InDataUniqueId, string InLotteryNo, int FnNo, string Alphabet, long TnNo) {
            return base.Channel.GetLotteryDtlInClaimAndUnSoldAsync(InDataUniqueId, InLotteryNo, FnNo, Alphabet, TnNo);
        }
    }
}
